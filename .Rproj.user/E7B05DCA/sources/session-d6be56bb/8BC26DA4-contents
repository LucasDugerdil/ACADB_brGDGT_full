#### Import training data and script ####
source("Import/Script/BRT_script.R")
Meco <- readRDS("Import/Training/Meco.Rds")
Mclim <- readRDS("Import/Training/Mclim.Rds")
Msurf.mean <- readRDS("Import/Training/MbrGDGT.Rds")
M.br.GDGT <- Msurf.mean[,grep("^f.I", colnames(Msurf.mean))]
set.seed(123)

#### Machine learning classification ####
Cmean = F
if(Cmean == T){
  #### Subsets des FA ####
  To.remove <- grep("[7,8]", colnames(M.br.GDGT))
  To.keep <- seq(1, ncol(M.br.GDGT))
  To.keep <- setdiff(To.keep, To.remove)
  M.br.GDGT.km <- M.br.GDGT[,To.keep]
  M.br.GDGT.km <- data.frame(t(M.br.GDGT.km), check.names = F)
  M.br.GDGT.km <- apply(M.br.GDGT.km, 2, MESS::round_percent)
  M.br.GDGT.km <- data.frame(t(M.br.GDGT.km/100), check.names = F)
  
  Keep.samptype <- c("Soil", "Moss", "Lacustrine")
  M.br.GDGT.km <- M.br.GDGT.km[row.names(M.br.GDGT.km) %in% row.names(Meco[Meco$Sample.type %in% Keep.samptype,]),]
  Mclim.km <- Mclim[row.names(Mclim) %in% row.names(Meco[Meco$Sample.type %in% Keep.samptype,]),]
  Meco.km <- Meco[row.names(Meco) %in% row.names(Meco[Meco$Sample.type %in% Keep.samptype,]),]
  
  #### Silhouet test (PAM) ####
  PAM.test = T
  if(PAM.test == T){
    silhouette_score <- function(k){
      km <- kmeans(M.br.GDGT.km, centers = k, nstart=25)
      ss <- silhouette(km$cluster, dist(M.br.GDGT.km))
      mean(ss[, 3])
    }
    k <- 2:10
    avg_sil <- sapply(k, silhouette_score)
    plot(k, type='b', avg_sil, xlab='Number of clusters', ylab='Average Silhouette Scores', frame=FALSE)
    pHAC <- fviz_nbclust(M.br.GDGT.km, kmeans, method='silhouette')
    
    W = 1000; H = 500; Save.path = "Figures/Silhouette_cluster.pdf"
    ggsave(filename = Save.path, plot = pHAC, width = W*0.026458333, height = H*0.026458333, units = "cm")
  }
  
  #### Clustering (Fuzzy C-means) ####
  set.seed(123)
  cm <- cmeans(M.br.GDGT.km, 2)
  H <- get_clust_tendency(M.br.GDGT.km, n = 50)
  hopkins <- round(H$hopkins_stat, digits = 2)
  
  cm$cluster[cm$cluster == 2] <- "K-warm/arid"
  cm$cluster[cm$cluster == 1] <- "K-cold/wet"
  M.br.GDGT.km$Cluster.km <- cm$cluster
  
  #### K-means evaluation and stats ####
  Training.set <- M.br.GDGT.km
  
  SMOTE = T
  if(SMOTE == T){
    smote_result <- SMOTE(Training.set[-ncol(Training.set)], Training.set[ncol(Training.set)], K = 5, dup_size = 1)
    C1 <- smote_result$data[smote_result$data$class == "K-warm/arid",]
    C2 <- smote_result$data[smote_result$data$class == "K-cold/wet",]
    set.seed(42)
    if(nrow(C2) > nrow(C1)){C2 <- C2[sample(nrow(C2), nrow(C1)),]}
    else{C1 <- C1[sample(nrow(C1), nrow(C2)),]}
    Training.set <- rbind(C1, C2)
    names(Training.set)[names(Training.set) == "class"] <- "Cluster.km"
  }
  Training.set$Cluster.km <-  factor(Training.set$Cluster.km)
  
  Cluster.prediction.ACADB.brGDGT <- randomForest(Cluster.km ~ ., data = Training.set, ntree = 500)
  saveRDS(Cluster.prediction.ACADB.brGDGT, "Results/Cluster.prediction.ACADB.brGDGT.Rds")
  
  #### Export clusters ####  
  Meco <- full_join(rownames_to_column(Meco), rownames_to_column(M.br.GDGT.km["Cluster.km"]), by = "rowname")
  row.names(Meco) <- Meco$rowname
  Meco <- Meco[setdiff(names(Meco), "rowname")]
  
  Meco$Cluster.km[is.na(Meco$Cluster.km)] <- "K-lacustrine"
  Meco$Cluster.km <- factor(Meco$Cluster.km, c("K-warm/arid", "K-cold/wet", "K-lacustrine"), ordered = T)
  Mfull <- cbind(Msurf.mean, Mclim, subset(Meco, select = -c(Latitude, Longitude)))
  saveRDS(Meco, "Results/Meco_kmean.Rds")
  # saveRDS(Meco3, "Resultats/ACA/GDGT/Meco3_kmean.Rds")
  Mbar <- full_join(rownames_to_column(Meco), rownames_to_column(Mclim), by = join_by(rowname))
  
  M.br.GDGT.km <- full_join(rownames_to_column(M.br.GDGT), rownames_to_column(Meco["Cluster.km"]), by = join_by(rowname))
  M.br.GDGT.km <- subset(M.br.GDGT.km, select = -c(rowname))
  M.br.GDGT.km <- M.br.GDGT.km[,c(To.keep, ncol(M.br.GDGT.km))]
  
  Table.sample.by.km <- Meco %>%
    mutate(Sample.type = if_else(Sample.type == "Moss", "Soil", Sample.type)) %>%
    group_by(Cluster.km) %>%
    count(Sample.type)
  pLake.C1 <- round(Table.sample.by.km[1,3]/(Table.sample.by.km[1,3] + Table.sample.by.km[2,3]), digits = 2)*100
  pLake.C2 <- round(Table.sample.by.km[3,3]/(Table.sample.by.km[3,3] + Table.sample.by.km[4,3]), digits = 2)*100
  
  #### Figure 3: Fuzzy C-mean clustering ####
  MyColors <- c("K-warm/arid" = "darkorange", "K-cold/wet" = "royalblue", "K-lacustrine" = "#0073C2")
  p1 <- fviz_cluster(list(data = subset(M.br.GDGT.km, select = -c(Cluster.km)), cluster = M.br.GDGT.km$Cluster.km), 
                     ellipse.type = "norm", repel = F,
                     ellipse.level = 0.80,
                     # palette = "jco", 
                     geom = "point", main = "(A) Fuzzy C-Means Clustering",
                     ggtheme = theme_minimal())
  p1 <- p1 + scale_color_manual(values = MyColors) + scale_fill_manual(values = MyColors)
  
  # if(exists("Eurasia_map") == F){source("Scripts/Pollen_fun_trans.R")}
  
  #### Plot k-mean map ####
  p2 <- ggplot(Meco, aes(y = Latitude, x = Longitude, colour = Cluster.km))+
    ggtitle("(C) Clusters location")+
    geom_polygon(data = Eurasia_map, aes(x=long, y=lat, group = group), alpha = 1, fill = "grey85", color = "grey30", size = 0.3)+
    geom_polygon(data = ACA.bo.proj, aes(x=long, y=lat),colour="black", fill = NA, size = .5) +
    geom_point(size = 1.5, alpha = .4)+
    scale_color_manual(values = MyColors) + 
    coord_quickmap(xlim = c(45, 125), ylim = c(25, 63)) +
    labs(x = c("Longitude (°)"), y = c("Latitude (°)"))
  
  Mano <- summary.aov(manova(cbind(AI, MAAT, MPCOQ, MAF) ~ Cluster.km, Mbar))
  Mano.lab <- c(paste("F = ", round(Mano$` Response AI`$`F value`[1], digits = 1), "***", sep = ""),
                paste("F = ", round(Mano$` Response MAAT`$`F value`[1], digits = 1), "***", sep = ""),
                paste("F = ", round(Mano$` Response MPCOQ`$`F value`[1], digits = 1), "***", sep = ""),
                paste("F = ", round(Mano$` Response MAF`$`F value`[1], digits = 1), "***", sep = "")
  )
  Mano.lab <- data.frame(variable = c("AI", "MAAT", "MPCOQ", "MAF"), 
                         Fval = Mano.lab, x = 1, y = c(7640, 14.05, 283, 16.2), Cluster.km = "white")
  
  Mbar <- subset(Mbar, select = c(AI, MAAT, MPCOQ, MAF, Cluster.km))
  Mbar <- melt(Mbar, "Cluster.km")
  Mbar2 <- melt(M.br.GDGT.km, "Cluster.km")
  Mbar$variable <- factor(Mbar$variable, levels = c("AI", "MAAT", "MPCOQ", "MAF"), ordered = T)
  Mbar <- Mbar[!is.na(Mbar$value),]
  
  #### Plot k-mean Climate param ####
  PlotBar <- ggplot(data = Mbar, aes(x = as.factor(variable), y = value, fill = Cluster.km))+
    geom_boxplot(outliers = F)+facet_wrap(vars(as.factor(variable)), scales = "free")+
    ggtitle("(B) Climate parameters")+
    geom_label(data = Mano.lab, aes(x = 1, y = Inf, label = Fval), size = 3.5,vjust = 1.3, hjust = 0.5, show.legend = F, fill = "white")+
    scale_fill_manual(values = MyColors)+
    theme(axis.title = element_blank(), axis.text.x = element_text(size = 12), strip.placement = "none", strip.background = element_blank(), strip.text = element_blank())
  
  Plot.kmean <- ((p1 / p2 + plot_layout(heights = c(0.66,0.33))) | PlotBar) & 
    theme(legend.position = "none",  panel.border = element_rect(fill = NA), panel.grid = element_blank(), panel.background = element_blank())
  
  #### Plot k-mean FA histogram ####
  Boxplot.ACADB <- GDGT.histo.plot.surf.core(Msurf = Msurf.mean, 
                                             Mtype = Meco, Select.type = "Cluster.km", Leg.pos = c(0.28,0.7), Leg.iso = F,
                                             Iso.GDGT = F, Remove.8Me = T, Remove.7Me = T, Overlap.OK = F, Show.Plotly = F,
                                             # Color.choice = c("#0073C2", "#80cec1", "#8c510a"),
                                             Color.choice = c(MyColors[[2]], MyColors[[1]]),
                                             # Color.choice = c("#8c510a", "#80cec1"),
                                             Return.plot = T, Global.box = T,
                                             Boxplot.title = "(D) brGDGT fractional adundances", Annot.size = 4, Leg.size = 7, Leg.box = T, Ymax = 45)
  
  #### Figure S4: Scatter plots ####
  PSI2 <- ggplot(Mfull, aes(y = CI, x = IR6Me, colour = Cluster.km))+ geom_point()+
    xlab(expression(IR[6*Me]))+
    scale_color_manual(values = MyColors) + theme(legend.position = "none",  panel.border = element_rect(fill = NA), panel.grid = element_blank(), panel.background = element_blank())
  
  H = W = 400; Save.plot ="Figures/CI_K1_K2.pdf" 
  ggsave(filename = Save.plot, PSI2, width = W*0.026458333, height = H*0.026458333, units = "cm")
  #### Linear plots ####
  PIR <- ggplot(Mfull, aes(y = IR, x = MBTp5Me, color = Cluster.km))+geom_point(alpha = .5)+ylim(0,1)+ xlim(0,1)+ geom_smooth(method = "lm", se = F, formula = 'y ~ x')+ stat_poly_eq(label.y = "bottom", label.x = "right", size = 2)+ xlab(expression(paste(MBT,"'"[5~Me])))+ggtitle("(E)")+ scale_color_manual(values = MyColors) + theme(legend.position = "none",  panel.border = element_rect(fill = NA), panel.grid = element_blank(), panel.background = element_blank())
  PIR2 <- ggplot(Mfull, aes(y = MBTp5Me, x = MAAT, color = Cluster.km))+geom_point(alpha = .5)+ylim(0,1)+ xlim(-10, 20)+ geom_smooth(method = "lm", se = F, formula = 'y ~ x')+ stat_poly_eq(label.y = "top", size = 2) + ylab(expression(paste(MBT,"'"[5~Me]))) +xlab("MAAT (°C)")+ggtitle("(F)")+ scale_color_manual(values = MyColors) + theme(legend.position = "none",  panel.border = element_rect(fill = NA), panel.grid = element_blank(), panel.background = element_blank())
  
  #### Figure S3: Ternary plot ####
  PIR3 <- Diag.ternaire.methylation(MGDGT = Msurf.mean, 
                                    Mcol = Meco$Cluster.km, Return.plot = T, Full.labels = T, Add.facet = F, My_colors = MyColors, 
                                    Show.Dearing = F, Show.Naafs.peat = F, Show.Plotly = F, Show.lake = F, Show.arrows = F,
                                    W = 900, H = 600, Alpha.dot = 0.4, Size.dot = 2.5, Export.to.chart.studio = F, Remove.ACA = T,
                                    Save.path = "Figures/DiagTern_methylation_kclust.pdf")
  #### Export ####
  PIR <- (PIR|PIR2) 
  
  Plot.kmean <- Plot.kmean/ ((Boxplot.ACADB)/(PIR))  + plot_layout(heights = c(0.5, 0.5))
  
  W = 700*.82; H = 1400*.82; Save.path = "Figures/ACA_kmean_presentation.pdf"
  ggsave(filename = Save.path, plot = Plot.kmean, width = W*0.026458333, height = H*0.026458333, units = "cm")
} else{
  Meco <- readRDS("Results/Meco_kmean.Rds")
  Mfull <- cbind(Msurf.mean, Mclim, subset(Meco, select = -c(Latitude, Longitude)))
}

#### Machine learning regression ####
Machine.learning = F
if(Machine.learning == T){
  #### Import and clean data ####
  M.MAAT.GDGT <- Msurf.mean[,grep("^MAAT", colnames(Msurf.mean))]
  M.MAF.GDGT <- Msurf.mean[,grep("^MAF", colnames(Msurf.mean))]
  M.br.GDGT <- Msurf.mean[,grep("^f.I", colnames(Msurf.mean))]
  
  Stat.7Me <- M.br.GDGT[,grep("7", colnames(M.br.GDGT))]
  Pourc.7Me <- round(length(rowSums(Stat.7Me)[rowSums(Stat.7Me) > 0])/nrow(M.br.GDGT)*100, digits = 0)
  
  To.remove <- grep("[7,8]", colnames(M.br.GDGT))
  To.keep <- seq(1, ncol(M.br.GDGT))
  To.keep <- setdiff(To.keep, To.remove)
  M.br.GDGT <- M.br.GDGT[,To.keep]
  M.br.GDGT <- M.br.GDGT[,grep("^f.I", colnames(M.br.GDGT))]
  
  M.br.GDGT <- M.br.GDGT + 0.00000001
  M.br.GDGT <- M.br.GDGT/rowSums(M.br.GDGT)
  
  Mcoord <- subset(Meco, select = c(Latitude, Longitude))
  Mcoord$ALTI <- NA
  names(Mcoord) <- c("LAT", "LONG", "ALTI")
  MC <- subset(Mclim, select = c(MPCOQ, MAAT, MAF, AI))
  
  Condition1 <- row.names(Meco)[which(Meco$Cluster.km %in% c("K-warm/arid"))] #n = 44, r2 = 0.47 (temp)
  Condition2 <- row.names(Meco)[which(Meco$Cluster.km %in% c("K-cold/wet"))] #n = 44, r2 = 0.47 (temp)
  MC.karid <- MC[Condition1,]
  Mcoord.karid <- Mcoord[Condition1,]
  MC.kwet <- MC[Condition2,]
  Mcoord.kwet <- Mcoord[Condition2,]
  M.br.GDGT.karid <- M.br.GDGT[Condition1,]
  M.br.GDGT.kwet <- M.br.GDGT[Condition2,]
  
  saveRDS(M.br.GDGT, "Results/M_brGDGT_ACADB.Rds")
  saveRDS(M.br.GDGT.karid, "Results/M_brGDGT_ACADB_karid.Rds")
  saveRDS(M.br.GDGT.kwet, "Results/M_brGDGT_ACADB_kwet.Rds")
  saveRDS(MC, "Results/M_clim_ACADB.Rds")
  saveRDS(MC.karid, "Results/M_clim_ACADB_karid.Rds")
  saveRDS(MC.kwet, "Results/M_clim_ACADB_kwet.Rds")
  
  #### Best Tune RF and BRT ####
  Tune.param.BRT.RF = F
  if(Tune.param.BRT.RF == T){
    #### Table S1: function hyper-parameters ####
    Tun.parm = F
    if(Tun.parm == T){
      BRT.ACADB.Set = CrossVal.ML(Mclim = MC, Param.clim = names(MC), Mproxy = M.br.GDGT, Model = "BRT", 
                                  Inner.CV = F, Self.CV = F, Return.param = T, Parallelize = F, Extern.CV = T, Tuning.extern.CV = T,
                                  Save.table = "Results/BRT_ACADB_opt_set.Rds",
                                  Save.model = "Results/BRT_ACADB_opt_set_final_model.Rds")
      
      BRT.Karid.Set = CrossVal.ML(Mclim = MC.karid, Param.clim = names(MC.karid), Mproxy = M.br.GDGT.karid, Model = "BRT", 
                                  Inner.CV = F, Self.CV = F, Return.param = T, Parallelize = F, Extern.CV = T, Tuning.extern.CV = T,
                                  Save.table = "Results/BRT_Kwarm_opt_set.Rds",
                                  Save.model = "Results/BRT_Kwarm_opt_set_final_model.Rds")
      
      BRT.Kwet.Set = CrossVal.ML(Mclim = MC.kwet, Param.clim = names(MC.kwet), Mproxy = M.br.GDGT.kwet, Model = "BRT", 
                                 Inner.CV = F, Self.CV = F, Return.param = T, Parallelize = F, Extern.CV = T, Tuning.extern.CV = T,
                                 Save.table = "Results/BRT_Kwet_opt_set.Rds",
                                 Save.model = "Results/BRT_Kwet_opt_final_model.Rds")
    }
    
    #### Table S2: different R2 et RMSE by CV methods ####
    Table.compar.R2.CV = T
    if(Table.compar.R2.CV == T){
      Table.SI = CrossVal.ML(Mclim = MC, Param.clim = "MAAT", Mproxy = M.br.GDGT, Model = c("BRT", "RF"), 
                             Inner.CV = T, Self.CV = T, Return.param = F, Parallelize = F, 
                             Extern.CV = T, Nested.CV = T, Tuning.extern.CV = F, Tuning.nested.CV = F,
                             Mtry = 2, tree_complexity = 10, Ntree = 500, max_trees = 2200, learning_rate = 0.010, min_obs = 20, bag_fraction = 0.75, K.fold.inner = 10, K.fold.outer = 5,
                             Save.table = "Results/Table_ML_CV_scores.Rds")
    }
  }
  else{
    BRT.ACADB.Set <- readRDS(file = "Results/BRT_ACADB_opt_set.Rds")
    BRT.Karid.Set <- readRDS(file = "Results/BRT_Kwarm_opt_set.Rds")
    BRT.Kwet.Set <- readRDS(file = "Results/BRT_Kwet_opt_set.Rds")
  }
  
  #### Calibration surface (WAPLS, MAT, RF et BRT) ####
  Calculate.FT = T
  if(Calculate.FT == T){
    RF.brACA.bool = T
    if(RF.brACA.bool == T){
      RF.brACA <- FT.quantif(M.br.GDGT, MC, Mcoord = Mcoord, Model = "RF",
                             RF.mtry = 2, Parallelize = F, Parallelize.ncores = 4, External.CV = T,
                             Save.RDS = T, Save.path = "Results/RF_brACA.csv"
      )
      
      RF.brACA.karid <- FT.quantif(M.br.GDGT.karid, MC.karid, Mcoord = Mcoord.karid, Model = "RF", 
                                   RF.mtry = 2, Parallelize = F, Parallelize.ncores = 4, External.CV = T,
                                   Save.RDS = T, Save.path = "Results/RF_brACA_karid.csv"
      )
      
      RF.brACA.kwet <- FT.quantif(M.br.GDGT.kwet, MC.kwet, Mcoord = Mcoord.kwet, Model = "RF", 
                                  RF.mtry = 2, Parallelize = F, Parallelize.ncores = 4, External.CV = T,
                                  Save.RDS = T, Save.path = "Results/RF_brACA_kwet.csv"
      )}
    
    BRT.brACA.bool = T
    if(BRT.brACA.bool == T){
      BRT.brACA <- FT.quantif(M.br.GDGT, MC, Mcoord = Mcoord, Model = "BRT", Display.final.set = T,
                              Parallelize = F, Parallelize.ncores = 6, BRT.remove.constante.var = F,
                              BRT.settings = BRT.ACADB.Set, BRT.ntree.recalcul = F,
                              BRT.package = "gbm", Internal.K.fold = 10,
                              Save.RDS = T, Save.path = "Results/BRT_brACA.csv"
      )
      
      BRT.brACA.karid <- FT.quantif(M.br.GDGT.karid, MC.karid, Mcoord = Mcoord.karid, Model = "BRT",
                                    Parallelize = F, Parallelize.ncores = 6, BRT.remove.constante.var = F,
                                    BRT.settings = BRT.Karid.Set, BRT.ntree.recalcul = F,
                                    BRT.package = "gbm", Internal.K.fold = 10,
                                    Save.RDS = T, Save.path = "Results/BRT_brACA_karid.csv"
      )
      
      BRT.brACA.kwet <- FT.quantif(M.br.GDGT.kwet, MC.kwet, Mcoord = Mcoord.kwet, Model = "BRT", 
                                   Parallelize = F, Parallelize.ncores = 4, BRT.remove.constante.var = F,
                                   BRT.settings = BRT.Kwet.Set, BRT.ntree.recalcul = F,
                                   BRT.package = "gbm", Internal.K.fold = 10,
                                   Save.RDS = T, Save.path = "Results/BRT_brACA_kwet.csv"
      )}
  }
  else{
    BRT.brACA       <- readRDS("Results/BRT_brACA.Rds")
    BRT.brACA.karid <- readRDS("Results/BRT_brACA_karid.Rds")
    BRT.brACA.kwet  <- readRDS("Results/BRT_brACA_kwet.Rds")
    RF.brACA        <- readRDS("Results/RF_brACA.Rds")
    RF.brACA.karid  <- readRDS("Results/RF_brACA_karid.Rds")
    RF.brACA.kwet   <- readRDS("Results/RF_brACA_kwet.Rds")
  }
  
  #### Table 1: RF and BRT performances ####
  Table.ML = T
  if(Table.ML == T){
    #### Wilcox test ####
    Wilcox = T
    if(Wilcox == T){
      ACADB.wilcox <- wilcox.test(BRT.brACA$Best.Param$R2.choice, RF.brACA$Best.Param$R2.choice, paired = T, alternative = "greater")
      ACADB.karid.wilcox <- wilcox.test(BRT.brACA.karid$Best.Param$R2.choice, RF.brACA.karid$Best.Param$R2.choice, paired = TRUE, alternative = "greater")
      ACADB.kwet.wilcox <- wilcox.test(BRT.brACA.kwet$Best.Param$R2.choice, RF.brACA.kwet$Best.Param$R2.choice, paired = TRUE, alternative = "greater")
      All.wilcox <- wilcox.test(c(BRT.brACA.kwet$Best.Param$R2.choice, 
                                  BRT.brACA.karid$Best.Param$R2.choice,
                                  BRT.brACA$Best.Param$R2.choice),
                                c(RF.brACA.kwet$Best.Param$R2.choice,
                                  RF.brACA.karid$Best.Param$R2.choice,
                                  RF.brACA$Best.Param$R2.choice),
                                paired = TRUE, alternative = "greater")
      
      ACADB.wilcox <- wilcox.test(BRT.brACA$Best.Param$RMSE, RF.brACA$Best.Param$RMSE, paired = TRUE, alternative = "less")
      ACADB.karid.wilcox <- wilcox.test(BRT.brACA.karid$Best.Param$RMSE, RF.brACA.karid$Best.Param$RMSE, paired = TRUE, alternative = "less")
      ACADB.kwet.wilcox <- wilcox.test(BRT.brACA.kwet$Best.Param$RMSE, RF.brACA.kwet$Best.Param$RMSE, paired = TRUE, alternative = "less")
      All.wilcox <- wilcox.test(c(BRT.brACA.kwet$Best.Param$RMSE, 
                                  BRT.brACA.karid$Best.Param$RMSE,
                                  BRT.brACA$Best.Param$RMSE),
                                c(RF.brACA.kwet$Best.Param$RMSE,
                                  RF.brACA.karid$Best.Param$RMSE,
                                  RF.brACA$Best.Param$RMSE),
                                paired = TRUE, alternative = "less")
      
      ACADB.wilcox <- wilcox.test(abs(BRT.brACA$Best.Param$I), abs(RF.brACA$Best.Param$I), paired = TRUE, alternative = "less")
      ACADB.karid.wilcox <- wilcox.test(abs(BRT.brACA.karid$Best.Param$I), abs(RF.brACA.karid$Best.Param$I), paired = TRUE, alternative = "less")
      ACADB.kwet.wilcox <- wilcox.test(abs(BRT.brACA.kwet$Best.Param$I), abs(RF.brACA.kwet$Best.Param$I), paired = TRUE, alternative = "less")
      All.wilcox <- wilcox.test(c(abs(BRT.brACA.kwet$Best.Param$I), 
                                  abs(BRT.brACA.karid$Best.Param$I),
                                  abs(BRT.brACA$Best.Param$I)),
                                c(abs(RF.brACA.kwet$Best.Param$I),
                                  abs(RF.brACA.karid$Best.Param$I),
                                  abs(RF.brACA$Best.Param$I)),
                                paired = TRUE, alternative = "less")
    }
    
    #### Table R2 / RMSE ####
    Table.res.ML <- function(M1 = NULL){
      A <- M1[[1]]
      B <- M1[[2]]
      C <- M1[[3]]
      
      A$Calib <- "ACADB"
      B$Calib <- "\\textit{K-cold/wet}"
      C$Calib <- "\\textit{K-warm/arid}"
      
      A <- rbind(A,B,C)
      A$Param.clim <- gsub("[0-9]", "", row.names(A))
      A <- A[order(A$Param.clim), c(10,9,4:7)]
      A$I <- ifelse(as.numeric(A$p.val)<0.001, paste(A$I, "*", sep = ""), A$I)
      A <- A[-c(6)]
      
      
      Position.clim <- match(unique(A$Param.clim), A$Param.clim)
      A$Param.clim[setdiff(seq(1:nrow(A)),Position.clim)] <- ""
      Position.clim <- c(Position.clim, nrow(A))
      
      colnames(A) <- c("Climate parameters$^{(a)}$", "Dataset", "$R^2$", "RMSE", "Moran's $I^{(b)}$")
      row.names(A) <- NULL
      return(list(A, Position.clim))
      
    }
    
    T.BRT <- Table.res.ML(M1 = list(BRT.brACA$Best.Param,
                                    BRT.brACA.kwet$Best.Param,
                                    BRT.brACA.karid$Best.Param
    ))
    T.RF <- Table.res.ML(M1 = list(RF.brACA$Best.Param,
                                   RF.brACA.kwet$Best.Param,
                                   RF.brACA.karid$Best.Param
    ))
    
    Position.clim <- T.BRT[[2]] 
    T.BRT <- T.BRT[[1]]
    T.RF <- T.RF[[1]]
    
    T.all <- cbind(T.BRT, T.RF) 
    T.all <- T.all[-c(6,7)]
    T.all <- rbind(names(T.all),T.all)
    names(T.all) <- c("", "", "\\textbf{BRT}", "", "", "\\textbf{RF}", "", "")
    T.all[c(1),] <- gsub("\\.1", "", T.all[c(1),]) 
    
    Save.path <- "Results/Tableau_BRT_brGDGT.csv"
    LateX.caption <- "Statistical results of the BRT and RF calibrations for four climate parameters (AI, MAAT, MAF and MPCOQ) based on 15 brGDGT compounds (i.e. all 5- and 6-methyls). The global ACADB and the two clustered groups (\textit{K-cold/wet} and \textit{K-warm/arid}) are tested by cross-validation, yielding the determination coefficient, Root Mean Square Error and the Moran's I with its \textit{p}-values to determine the calibration spatial autocorrelation."
    Path.to.create <- gsub("(.*/).*\\.csv.*","\\1", Save.path)
    dir.create(file.path(Path.to.create), showWarnings = FALSE)
    write.table(T.all, file=Save.path, row.names=T, col.names=NA, sep=",", dec = ".")
    
    print(T.all)
    library(xtable)
    Save.path.tex <- gsub("\\.csv", "\\.tex", Save.path)
    Tlatex <- xtable(T.all, caption = LateX.caption, type = "latex", label = "FT_table")
    print(Tlatex, file = Save.path.tex, booktabs = T, include.rownames = F, comment = F,
          caption.placement = "top", sanitize.text.function = function(x){x},
          hline.after = c(-1,1,Position.clim[-c(1, length(Position.clim))],nrow(T.all)))
    
    #### Table SI paramètres BRT ####
    A <- BRT.brACA$Settings
    B <- BRT.brACA.kwet$Settings
    C <- BRT.brACA.karid$Settings
    A$Param.clim <- row.names(A)
    B$Param.clim <- row.names(B)
    C$Param.clim <- row.names(C)
    A$Dataset <- "ACADB"
    B$Dataset <- "K-cold/wet"
    C$Dataset <- "K-warm/arid"
    
    TSI <- rbind(A, B, C)
    
    TSI <- TSI[c(8,7,6,5,1:4)]
    TSI <- TSI[order(TSI$Dataset, TSI$Param.clim),]
    TSI <- TSI[order(TSI$Dataset, TSI$Param.clim),]
    Position.clim <- match(unique(TSI$Dataset), TSI$Dataset)
    TSI$Dataset[setdiff(seq(1:nrow(TSI)),Position.clim)] <- ""
    Position.clim <- c(Position.clim, nrow(TSI))
    row.names(TSI) <- 1:nrow(TSI)
    names(TSI) <- c("Dataset", "Climate parameter", "R$^2$", "RMSE", "n_{trees}", "Tree complexity", "Learning rate", "Minimal number of observations")
    
    TSI$Dataset[grepl("K-", TSI$Dataset)] <- paste("\\textit{", TSI$Dataset[grepl("K-", TSI$Dataset)], "}", sep = "")
    
    Save.path <- "Results/SI_Tableau_BRT_brGDGT_param.csv"
    LateX.caption <- "Hyper-parameters selected though the nested cross-validation process. Nested cross-validation were performed on 10 outer and 5 inner k-folds. The average R$^2$ and RMSE is returned here, as well as the hyper-parameter value without over-fitting for the number of trees, the tree complexity, the learning rate and the minimal number of observations XXXX."
    Path.to.create <- gsub("(.*/).*\\.csv.*","\\1", Save.path)
    dir.create(file.path(Path.to.create), showWarnings = FALSE)
    write.table(TSI, file=Save.path, row.names=T, col.names=NA, sep=",", dec = ".")
    
    print(TSI)
    library(xtable)
    Save.path.tex <- gsub("\\.csv", "\\.tex", Save.path)
    Tlatex <- xtable(TSI, caption = LateX.caption, type = "latex", label = "FT_table")
    print(Tlatex, file = Save.path.tex, booktabs = T, include.rownames = F, comment = F,
          caption.placement = "top", sanitize.text.function = function(x){x},
          hline.after = c(-1,Position.clim-1,nrow(TSI)))
    
    #### Table SI Cross-validation ####
    Table.CV.SI <- readRDS("Results/Table_ML_CV_scores.Rds")
    Table.CV.SI <- Table.CV.SI[c(2:nrow(Table.CV.SI)), c(1:ncol(Table.CV.SI)-1)]
    names(Table.CV.SI) <- c("\\textbf{Performance estimation method}", "R$^2$", "RMSE", "R$^2$", "RMSE")
    Table.CV.SI$`\\textbf{Performance estimation method}` <- c("Self values", "Internal cross-validation (OOB/ k-fold)", "External cross-validation (caret)", "Nested cross-validation")
    
    Save.path <- "Results/SI_Tableau_crossval.csv"
    LateX.caption <- "Statistics using to assess the performance of the two machine learning methods based on R$^2$ and RMSE. Here, only the MAAT inferred from the ACADB is tested. Both Random Forest (RF) and Boosted Regression Trees (BRT) produce self statistics (i.e. statistic estimated with the same data for training and testing set and internal cross-validation (i.e., the $R^2$ and RMSE are averaged on multiple statistic values obtain from different training and testing datasets). The internal cross-validation is obtain from \\textit{out-of-bag} method for the RF and k-fold cross-validation for the BRT. An external cross-validation using \\texttt{train()} function from \\texttt{caret} package was also performed based on ten k-folds. Here, the input data used to train the machine learning algorithm is \\textit{a priori} split in training and testing datasets. Finally, a nested cross-validation based on five inner and ten outer folds gives the last statistics."
    Path.to.create <- gsub("(.*/).*\\.csv.*","\\1", Save.path)
    dir.create(file.path(Path.to.create), showWarnings = FALSE)
    write.table(Table.CV.SI, file=Save.path, row.names=T, col.names=NA, sep=",", dec = ".")
    
    print(Table.CV.SI)
    library(xtable)
    Save.path.tex <- gsub("\\.csv", "\\.tex", Save.path)
    Tlatex <- xtable(Table.CV.SI, caption = LateX.caption, type = "latex", label = "FT_table")
    print(Tlatex, file = Save.path.tex, booktabs = T, include.rownames = F, comment = F,
          caption.placement = "top", sanitize.text.function = function(x){x},
          hline.after = c(-1,0,nrow(Table.CV.SI)))
    
    
  }
  
  #### Figure 4: brGDGT importance ####
  GDGT.contrib = T
  if(GDGT.contrib == T){
    #### Import contributions ####
    BRT.brACA.c <- data.frame(read.csv(file="Results/BRT_brACA_Taxa_importance.csv", sep=",", dec=".",header=T, row.names = 1, stringsAsFactors = F))
    BRT.brACA.karid.c <- data.frame(read.csv(file="Results/BRT_brACA_karid_Taxa_importance.csv", sep=",", dec=".",header=T, row.names = 1, stringsAsFactors = F))
    BRT.brACA.kwet.c <- data.frame(read.csv(file="Results/BRT_brACA_kwet_Taxa_importance.csv", sep=",", dec=".",header=T, row.names = 1, stringsAsFactors = F))
    RF.brACA.c <- data.frame(read.csv(file="Results/RF_brACA_Taxa_importance.csv", sep=",", dec=".",header=T, row.names = 1, stringsAsFactors = F))
    RF.brACA.karid.c <- data.frame(read.csv(file="Results/RF_brACA_karid_Taxa_importance.csv", sep=",", dec=".",header=T, row.names = 1, stringsAsFactors = F))
    RF.brACA.kwet.c <- data.frame(read.csv(file="Results/RF_brACA_kwet_Taxa_importance.csv", sep=",", dec=".",header=T, row.names = 1, stringsAsFactors = F))
    
    #### Add average importance by rank ####
    Average.imp.order <- function(importance_df, Dataset = "ACADB", Method = "BRT") {
      library(tidyverse)
      # library(tidyr)
      importance_df <- importance_df %>%
        rownames_to_column(var = "Compound")
      
      avg_importance <- importance_df %>%
        tidyr::pivot_longer(cols = -Compound, names_to = "Climate", values_to = "Importance") %>%
        dplyr::group_by(Compound) %>%
        # summarise(AvgImportance = mean(Importance, na.rm = TRUE)) %>%
        dplyr::summarise(
          AvgImportance = mean(Importance, na.rm = TRUE),
          SD = sd(Importance, na.rm = TRUE),
          N = dplyr::n(),
          SE = SD / sqrt(N),
          CI_lower = AvgImportance - 1.96 * SE,
          CI_upper = AvgImportance + 1.96 * SE
        ) %>%
        dplyr::arrange(desc(AvgImportance)) %>%
        dplyr::mutate(Rank = row_number())
      
      avg_importance$Dataset <- Dataset
      avg_importance$Method <- Method
      return(avg_importance)
    }
    
    BRT.c <- cbind(BRT.brACA.c, setNames(BRT.brACA.karid.c, paste(names(BRT.brACA.karid.c), "arid")), setNames(BRT.brACA.kwet.c, paste(names(BRT.brACA.kwet.c), "wet")))
    Imp.BRT <- Average.imp.order(BRT.c, "BRT", "BRT")
    RF.c <- cbind(RF.brACA.c, setNames(RF.brACA.karid.c, paste(names(RF.brACA.karid.c), "arid")), setNames(RF.brACA.kwet.c, paste(names(RF.brACA.kwet.c), "wet")))
    Imp.RF <- Average.imp.order(RF.c, "RF", "RF")
    MTB <- rbind(Imp.BRT, Imp.RF)
    
    label_points <- MTB %>%
      dplyr::group_by(Dataset) %>%
      dplyr::filter(Rank == min(Rank))
    
    p1 <- ggplot(MTB, aes(x = Rank, y = AvgImportance, color = Dataset, fill = Dataset, shape = Dataset)) +
      geom_ribbon(aes(ymin = CI_lower, ymax = CI_upper), alpha = 0.2, linewidth = NA) +
      geom_line() +
      geom_point(size = 2) + scale_x_continuous(breaks = 1:15, labels = function(x) ifelse(x %in% c(1, 5, 10, 15), x, ""))+
      ggrepel::geom_text_repel(data = label_points, aes(label = Method), nudge_x = c(4,3), nudge_y = c(-2, -5), show.legend = F, size = 3, segment.color = "grey60", segment.curvature = 0.2) +        
      labs(x = "Rank of Compound", y = "Importance (%)", title = NULL) +
      theme(plot.background = element_blank(), panel.background = element_rect(fill = NA, colour = "grey30"), legend.position = "none", panel.grid = element_blank())
    
    #### Clean data ####
    BRT.brACA.c$Models <-"BRT ACADB"
    BRT.brACA.karid.c$Models <-"BRT K-warm/arid"
    BRT.brACA.kwet.c$Models <-"BRT K-cold/wet"
    RF.brACA.c$Models <-"RF ACADB"
    RF.brACA.karid.c$Models <-"RF K-warm/arid"
    RF.brACA.kwet.c$Models <-"RF K-cold/wet"
    
    BRT.brACA.c$Compounds <- row.names(BRT.brACA.c)
    BRT.brACA.karid.c$Compounds <- row.names(BRT.brACA.karid.c)
    BRT.brACA.kwet.c$Compounds <- row.names(BRT.brACA.kwet.c)
    RF.brACA.c$Compounds <- row.names(RF.brACA.c)
    RF.brACA.karid.c$Compounds <- row.names(RF.brACA.karid.c)
    RF.brACA.kwet.c$Compounds <- row.names(RF.brACA.kwet.c)
    
    BRT.brACA.c <- reshape2::melt(BRT.brACA.c, id = c("Models", "Compounds"))
    BRT.brACA.karid.c <- reshape2::melt(BRT.brACA.karid.c, id = c("Models", "Compounds"))
    BRT.brACA.kwet.c <- reshape2::melt(BRT.brACA.kwet.c, id = c("Models", "Compounds"))
    RF.brACA.c <- reshape2::melt(RF.brACA.c, id = c("Models", "Compounds"))
    RF.brACA.karid.c <- reshape2::melt(RF.brACA.karid.c, id = c("Models", "Compounds"))
    RF.brACA.kwet.c <- reshape2::melt(RF.brACA.kwet.c, id = c("Models", "Compounds"))
    
    
    df_list <- list(BRT.brACA.c, BRT.brACA.karid.c, BRT.brACA.kwet.c, RF.brACA.c, RF.brACA.karid.c, RF.brACA.kwet.c)
    MTB <- Reduce(function(x, y) merge(x, y, all = T, sort = F), df_list)
    MTB$Calibration <- gsub(".* ","", MTB$Models)
    MTB$Models <- gsub(" .*","", MTB$Models)
    MTB$Models[MTB$Models == "BRT"] <- "(A) BRT"
    MTB$Models[MTB$Models == "RF"] <- "(B) RF"
    MTB$Compounds <- gsub("_5Me", "", MTB$Compounds)
    MTB$Compounds <- gsub("_6Me", "'", MTB$Compounds)
    MTB$Compounds <- gsub("f.", "", MTB$Compounds)
    
    TAB <- MTB %>%
      dplyr::group_by(Compounds) %>%
      # dplyr::summarise(mean = mean(value), .groups = "drop")
      dplyr::summarise_at(vars(value), mean)
    TAB <- TAB[order(TAB$value, decreasing = T),]
    
    MTB$variable <- factor(MTB$variable, levels = sort(levels(MTB$variable)))
    
    #### Plots + export ####
    MTB$Compounds <- factor(MTB$Compounds, levels = TAB$Compounds, ordered = T)
    MTB$variable <- factor(MTB$variable, levels = c("MAAT", "MAF", "AI", "MPCOQ"), ordered = T)
    Pcontrib <- ggplot(data = MTB, aes(x = Compounds, y = value, fill = Calibration, group = Calibration))+
      geom_vline(xintercept = seq(0, nlevels(MTB$Compounds), by = 1), colour = "grey80", size = 0.1) +
      geom_hline(yintercept = c(0,5,10,15,20), colour = "grey60", size = 0.2, linetype = "dashed") +
      geom_bar(stat = "identity", position = "dodge")+
      coord_polar()+
      # scale_x_continuous(limits = c(0, 360), expand = c(0, 0), breaks = seq(0, 360-1, by = 45)) +
      # scale_y_continuous(limits = c(0, 15000), breaks = seq(0, 15000, by = 3000)) +
      
      ylim(-10, max(MTB$value) + max(MTB$value)*0.1) +
      # scale_y_log10()+
      scale_fill_manual(values = c("ACADB" = "bisque3", "K-cold/wet" = "royalblue", "K-warm/arid" = "darkorange"))+
      facet_grid(variable ~ Models, scale = "free", switch = "y")+
      theme_minimal()+
      theme(legend.position = "bottom", axis.title = element_blank(), legend.background = element_blank(),
            panel.border = element_blank(), legend.key = element_blank(), axis.ticks = element_blank(),
            axis.text.y = element_blank(), strip.text = element_text(size = 12), panel.grid  = element_blank()
      )
    
    Pcontrib <- Pcontrib + theme(plot.margin = ggplot2::margin(0,0,0,0))
    p1 <- p1 + theme(plot.margin = ggplot2::margin(0,0,0,0))
    
    Pcontrib <- (Pcontrib) / (p1) + plot_layout(heights = c(85, 15))
    H = 900; W = H*.45; Save.plot ="Figures/BRT_RF_contribs.pdf"
    ggsave(filename = Save.plot, Pcontrib, width = W*0.026458333, height = H*0.026458333, units = "cm")
    
    #### Contribution exemple (SI, GDGT papier 2) ####
    MSI <- MTB[MTB$variable == "MAAT" & MTB$Models == "(A) BRT",]
    MSI$Models <- "BRT"
    # MSI$Compounds <- factor(MSI$Compounds, levels = rev(levels(MSI$Compounds)))
    MSI$Compounds <- factor(MSI$Compounds, levels = rev(TAB$Compounds), ordered = F)
    
    Pcontrib <- ggplot(data = MSI, aes(y = Compounds, x = value, fill = Calibration, group = Calibration))+
      geom_vline(xintercept = c(0,5,10,20,30), colour = "grey60", size = 0.2, linetype = "dashed") +
      geom_bar(stat = "identity", position = "dodge")+
      xlim(0,max(MSI$value)) +
      scale_fill_manual(values = c("ACADB" = "bisque3", "K-cold/wet" = "royalblue", "K-warm/arid" = "darkorange"))+
      facet_grid(.~Calibration, scale = "free")+
      theme_minimal()+
      xlab("Relative contribution of each brGDGT (%)")+
      ylab("brGDGT compounds")+
      theme(legend.position = "none", 
            # axis.title = element_blank(), 
            panel.background = element_rect(fill = NA, colour = "grey60"), 
            # axis.ticks = element_blank(), 
            panel.grid = element_blank(),
            strip.text = element_text(size = 12))
    
    H = 300; W = 600; Save.plot ="Figures/BRT_RF_contribs_SI.pdf"
    ggsave(filename = Save.plot, Pcontrib, width = W*0.026458333, height = H*0.026458333, units = "cm")
    
    
    #### Stats by climate param ####
    Stat.param.clim <- MTB %>%
      dplyr::group_by(variable, Compounds) %>%
      dplyr::summarise(
        mean = mean(value),
        .groups = "drop"
      ) %>%
      tidyr::pivot_wider(
        names_from = variable,
        values_from = c(mean),
        names_glue = "{variable}_{.value}"
      )
    
    print(Stat.param.clim)
    
    print("Compound importance order for AI:")
    print(as.character(Stat.param.clim$Compounds[order(Stat.param.clim$AI_mean, decreasing = T)]))
    print("Compound importance order for MPCOQ:")
    print(as.character(Stat.param.clim$Compounds[order(Stat.param.clim$MPCOQ_mean, decreasing = T)]))
    
    print("Compound importance order for MAAT:")
    print(as.character(Stat.param.clim$Compounds[order(Stat.param.clim$MAAT_mean, decreasing = T)]))
    print("Compound importance order for MAF:")
    print(as.character(Stat.param.clim$Compounds[order(Stat.param.clim$MAF_mean, decreasing = T)]))
    
  }
  
  #### Figure 5: Plot residuals (MAAT) ####
  Plot.res.ok = T
  if(Plot.res.ok == T){
    Add.RMSE = T; Res.right = T; Res.bottom = T; My_CV = My_CV_BRT = "external"; Common.res.lim = c(-25, 15)
    p.all.BRT <- Residual.plot(MML = BRT.brACA[c(2,5)], Msurf = M.br.GDGT, Mclim = Mclim, Annot = paste("A", 1, sep = ''), model = c("BRT~(ACADB)"),
                               Add.RMSE = Add.RMSE, CV.method = My_CV_BRT, Res.right = Res.right, Res.bottom = Res.bottom, Residual.lims = Common.res.lim,
                               Save.residual = "Results/Residuals_BRT_ACADB.Rds", Manual.titre = "BRT~(ACADB)"
    )
    
    p.kwet.BRT <- Residual.plot(MML = BRT.brACA.kwet[c(2,5)],
                                MML.surf.train = M.br.GDGT.kwet, MML.clim.train = Mclim[row.names(Mclim) %in% row.names(M.br.GDGT.kwet),],
                                Save.residual = "Results/Residuals_BRT_kwet.Rds", Residual.lims = Common.res.lim, Manual.titre = "BRT~(italic(K-cold/wet))",
                                Annot = paste("A", 2, sep = ''), model = c("BRT (K-wet)"), Add.RMSE = Add.RMSE, CV.method = My_CV_BRT, Res.right = Res.right, Res.bottom = Res.bottom)
    
    p.karid.BRT <- Residual.plot(MML = BRT.brACA.karid[c(2,5)],
                                 MML.surf.train = M.br.GDGT.karid, MML.clim.train = Mclim[row.names(Mclim) %in% row.names(M.br.GDGT.karid),],
                                 Save.residual = "Results/Residuals_BRT_karid.Rds", Residual.lims = Common.res.lim, Manual.titre = "BRT~(italic(K-warm/arid))",
                                 Annot = paste("A", 3, sep = ''), model = c("BRT (K-arid)"), Add.RMSE = Add.RMSE, CV.method = My_CV_BRT, Res.right = Res.right, Res.bottom = Res.bottom)
    
    p.all.RF <- Residual.plot(MML = RF.brACA[c(2,5)], Msurf = M.br.GDGT, Mclim = Mclim,
                              Save.residual = "Results/Residuals_RF_ACADB.Rds", Residual.lims = Common.res.lim, Manual.titre = "RF~(ACADB)",
                              Annot = paste("B", 1, sep = ''), model = c("RF (ACADB)"), FT = "RF", Add.RMSE = Add.RMSE, CV.method = My_CV, Res.right = Res.right, Res.bottom = Res.bottom)
    
    p.kwet.RF <- Residual.plot(MML = RF.brACA.kwet[c(2,5)],
                               Save.residual = "Results/Residuals_RF_kwet.Rds", Residual.lims = Common.res.lim,
                               MML.surf.train = M.br.GDGT.kwet, MML.clim.train = Mclim[row.names(Mclim) %in% row.names(M.br.GDGT.kwet),], Manual.titre = "RF~(italic(K-cold/wet))",
                               Annot = paste("B", 2, sep = ''), model = c("RF (K-wet)"), FT = "RF", Add.RMSE = Add.RMSE, CV.method = My_CV, Res.right = Res.right, Res.bottom = Res.bottom)
    
    p.karid.RF <- Residual.plot(MML = RF.brACA.karid[c(2,5)],
                                MML.surf.train = M.br.GDGT.karid, MML.clim.train = Mclim[row.names(Mclim) %in% row.names(M.br.GDGT.karid),],
                                Save.residual = "Results/Residuals_RF_karid.Rds", Residual.lims = Common.res.lim, Manual.titre = "RF~(italic(K-warm/arid))",
                                Annot = paste("B", 3, sep = ''), model = c("RF (K-arid)"), FT = "RF", Add.RMSE = Add.RMSE, CV.method = My_CV, Res.right = Res.right, Res.bottom = Res.bottom)
    
    
    p.calib <- Residual.plot(MML = NULL, Msurf = M.MAAT.GDGT[c(2,9,8)], Mclim = Mclim, Annot = paste("C", seq(1:4), sep = ''),
                             Save.residual = "Results/Residuals_LR.Rds", Residual.lims = Common.res.lim,
                             Add.RMSE = Add.RMSE, Res.right = Res.right, Res.bottom = Res.bottom)
    
    k <- list(p.all.BRT, p.kwet.BRT, p.karid.BRT, 
              p.all.RF, p.kwet.RF, p.karid.RF,
              p.calib[[1]], p.calib[[2]], p.calib[[3]])
    p <- wrap_plots(k, nrow = 3)
    H = 1150*1.12; W = 1000*1.12; Save.plot ="Figures/Obs_pred_scatterplot_ML_MAAT.pdf"
    ggsave(filename = Save.plot, p, width = W*0.026458333, height = H*0.026458333, units = "cm")
  }
  
  #### Figure S7: Plot residuals (MAF) ####
  Plot.res.ok = T
  if(Plot.res.ok == T){
    Add.RMSE = T; Res.right = T; Res.bottom = T; My_CV = My_CV_BRT = "external"; Common.res.lim = c(-25, 15)
    p.all.BRT <- Residual.plot(MML = BRT.brACA[c(3,5)], Msurf = M.br.GDGT, Mclim = Mclim, Annot = paste("A", 1, sep = ''), model = c("BRT~(ACADB)"),
                               Add.RMSE = Add.RMSE, CV.method = My_CV_BRT, Res.right = Res.right, Res.bottom = Res.bottom, Residual.lims = Common.res.lim,
                               Save.residual = "Results/Residuals_BRT_ACADB_MAF.Rds", Manual.titre = "BRT~(ACADB)")
    
    p.kwet.BRT <- Residual.plot(MML = BRT.brACA.kwet[c(3,5)],
                                MML.surf.train = M.br.GDGT.kwet, MML.clim.train = Mclim[row.names(Mclim) %in% row.names(M.br.GDGT.kwet),],
                                Save.residual = "Results/Residuals_BRT_kwet_MAF.Rds", Residual.lims = Common.res.lim, Manual.titre = "BRT~(italic(K-cold/wet))",
                                Annot = paste("A", 2, sep = ''), model = c("BRT (K-wet)"), Add.RMSE = Add.RMSE, CV.method = My_CV_BRT, Res.right = Res.right, Res.bottom = Res.bottom)
    
    p.karid.BRT <- Residual.plot(MML = BRT.brACA.karid[c(3,5)],
                                 MML.surf.train = M.br.GDGT.karid, MML.clim.train = Mclim[row.names(Mclim) %in% row.names(M.br.GDGT.karid),],
                                 Save.residual = "Results/Residuals_BRT_karid_MAF.Rds", Residual.lims = Common.res.lim, Manual.titre = "BRT~(italic(K-warm/arid))",
                                 Annot = paste("A", 3, sep = ''), model = c("BRT (K-arid)"), Add.RMSE = Add.RMSE, CV.method = My_CV_BRT, Res.right = Res.right, Res.bottom = Res.bottom)
    
    p.all.RF <- Residual.plot(MML = RF.brACA[c(3,5)], Msurf = M.br.GDGT, Mclim = Mclim,
                              Save.residual = "Results/Residuals_RF_ACADB_MAF.Rds", Residual.lims = Common.res.lim, Manual.titre = "RF~(ACADB)",
                              Annot = paste("B", 1, sep = ''), model = c("RF (ACADB)"), FT = "RF", Add.RMSE = Add.RMSE, CV.method = My_CV, Res.right = Res.right, Res.bottom = Res.bottom)
    
    p.kwet.RF <- Residual.plot(MML = RF.brACA.kwet[c(3,5)],
                               Save.residual = "Results/Residuals_RF_kwet_MAF.Rds", Residual.lims = Common.res.lim,
                               MML.surf.train = M.br.GDGT.kwet, MML.clim.train = Mclim[row.names(Mclim) %in% row.names(M.br.GDGT.kwet),], Manual.titre = "RF~(italic(K-cold/wet))",
                               Annot = paste("B", 2, sep = ''), model = c("RF (K-wet)"), FT = "RF", Add.RMSE = Add.RMSE, CV.method = My_CV, Res.right = Res.right, Res.bottom = Res.bottom)
    
    p.karid.RF <- Residual.plot(MML = RF.brACA.karid[c(3,5)],
                                MML.surf.train = M.br.GDGT.karid, MML.clim.train = Mclim[row.names(Mclim) %in% row.names(M.br.GDGT.karid),],
                                Save.residual = "Results/Residuals_RF_karid_MAF.Rds", Residual.lims = Common.res.lim, Manual.titre = "RF~(italic(K-warm/arid))",
                                Annot = paste("B", 3, sep = ''), model = c("RF (K-arid)"), FT = "RF", Add.RMSE = Add.RMSE, CV.method = My_CV, Res.right = Res.right, Res.bottom = Res.bottom)
    
    
    p.calib <- Residual.plot(MML = NULL, Msurf = M.MAF.GDGT, Mclim = Mclim, Annot = paste("C", seq(1:4), sep = ''),
                             Save.residual = "Results/Residuals_LR_MAF.Rds", Residual.lims = Common.res.lim,
                             Add.RMSE = Add.RMSE, Res.right = Res.right, Res.bottom = Res.bottom)
    
    k <- list(p.all.BRT, p.kwet.BRT, p.karid.BRT, 
              p.all.RF, p.kwet.RF, p.karid.RF,
              p.calib[[1]], p.calib[[2]], p.calib[[3]])
    p <- wrap_plots(k, nrow = 3)
    H = 1150*1.12; W = 1000*1.12; Save.plot ="Figures/Obs_pred_scatterplot_ML_MAF.pdf"
    ggsave(filename = Save.plot, p, width = W*0.026458333, height = H*0.026458333, units = "cm")
  }
  
  #### Figure 6: clim param independence ####
  Mat.cor.clim = T
  if(Mat.cor.clim == T){
    Keep.clim <- c("AI", "MAAT", "MAF", "MPCOQ")
    Mmatcor.ACADB <- cbind(Meco, Mclim)
    Mmatcor.ACADB.karid <- Mmatcor.ACADB[Mmatcor.ACADB$Cluster.km == "K-warm/arid", Keep.clim]
    Mmatcor.ACADB.kwet <- Mmatcor.ACADB[Mmatcor.ACADB$Cluster.km == "K-cold/wet", Keep.clim]
    Mmatcor.ACADB <- Mmatcor.ACADB[Keep.clim]
    
    H = 300*.8; W = 800*.8; Save.matcor.trait = "Figures/Clim_param_indep.pdf"
    pdf(file = Save.matcor.trait, width = W*0.01041666666667, height = H*0.01041666666667)
    par(mfrow = c(1,3))
    A <- Mat.corel(Mmatcor.ACADB, Mmatcor.ACADB, Display.pval = "pch", Label = F, I.confiance = 0.99, Label.simple = T, Disp.R = "number", Display = "lower", Title = "(A) ACADB")
    B <- Mat.corel(Mmatcor.ACADB.kwet, Mmatcor.ACADB.kwet, Display.pval = "pch", Label = F, I.confiance = 0.99, Label.simple = T, Disp.R = "number", Display = "lower", Title = "(B) K-cold/wet")
    C <- Mat.corel(Mmatcor.ACADB.karid, Mmatcor.ACADB.karid, Display.pval = "pch", Label = F, I.confiance = 0.99, Label.simple = T, Disp.R = "number", Display = "lower", Title = "(C) K-warm/arid")
    dev.off()
    
  }
  
  #### Table S3: Normality estimation ####
  Norm.est = T
  if(Norm.est == T){
    #### Import residuals ####
    Res.BRT.ACADB <- readRDS("Results/Residuals_BRT_ACADB.Rds")
    Res.BRT.karid <- readRDS("Results/Residuals_BRT_karid.Rds")
    Res.BRT.kwet <- readRDS("Results/Residuals_BRT_kwet.Rds")
    Res.RF.ACADB <- readRDS("Results/Residuals_RF_ACADB.Rds")
    Res.RF.karid <- readRDS("Results/Residuals_RF_karid.Rds")
    Res.RF.kwet <- readRDS("Results/Residuals_RF_kwet.Rds")
    Res.BRT.ACADB.MAF <- readRDS("Results/Residuals_BRT_ACADB_MAF.Rds")
    Res.BRT.karid.MAF <- readRDS("Results/Residuals_BRT_karid_MAF.Rds")
    Res.BRT.kwet.MAF <- readRDS("Results/Residuals_BRT_kwet_MAF.Rds")
    Res.RF.ACADB.MAF <- readRDS("Results/Residuals_RF_ACADB_MAF.Rds")
    Res.RF.karid.MAF <- readRDS("Results/Residuals_RF_karid_MAF.Rds")
    Res.RF.kwet.MAF <- readRDS("Results/Residuals_RF_kwet_MAF.Rds")
    
    Res.MR.DJ <- Residual.plot(MML = NULL, Msurf = M.MAAT.GDGT[c("MAAT_mr_DJ")], Mclim = Mclim, return.plot = F)
    Res.MBT.DJ <- Residual.plot(MML = NULL, Msurf = M.MAAT.GDGT[c("MAAT_DJ_5Me")], Mclim = Mclim, return.plot = F)
    Res.MR.Chen <- Residual.plot(MML = NULL, Msurf = M.MAAT.GDGT[c("MAAT_Chen_Tjk")], Mclim = Mclim, return.plot = F)
    
    Res.MAF.MSosa <- Residual.plot(MML = NULL, Msurf = M.MAF.GDGT[c("MAF_MSosa")], Mclim = Mclim, return.plot = F)
    Res.MAF.meth <- Residual.plot(MML = NULL, Msurf = M.MAF.GDGT[c("MAF_meth_Raberg")], Mclim = Mclim, return.plot = F)
    Res.MAF.full <- Residual.plot(MML = NULL, Msurf = M.MAF.GDGT[c("MAF_full_Raberg")], Mclim = Mclim, return.plot = F)
    
    #### Summary table ####
    RA.MAAT <- Residual_analysis(Res.list <- list("BRT ACADB" = Res.BRT.ACADB,
                                                  "BRT k-arid" = Res.BRT.karid,
                                                  "BRT k-wet" = Res.BRT.kwet,
                                                  "RF ACADB" = Res.RF.ACADB,
                                                  "RF k-arid" = Res.RF.karid,
                                                  "RF k-wet" = Res.RF.kwet,
                                                  "LR MBT DJ" = Res.MBT.DJ,
                                                  "LR MR DJ" = Res.MR.DJ,
                                                  "LR MR Chen" = Res.MR.Chen
    ), Export.latex = T,
    Save.path = "Results/Table_SI_res_analysis_MAAT.csv")
    
    RA.MAF <- Residual_analysis(Res.list <- list("BRT ACADB" = Res.BRT.ACADB.MAF,
                                                 "BRT k-arid" = Res.BRT.karid.MAF,
                                                 "BRT k-wet" = Res.BRT.kwet.MAF,
                                                 "RF ACADB" = Res.RF.ACADB.MAF,
                                                 "RF k-arid" = Res.RF.karid.MAF,
                                                 "RF k-wet" = Res.RF.kwet.MAF,
                                                 "LR Bay" = Res.MAF.MSosa,
                                                 "LR MR Meth." = Res.MAF.meth,
                                                 "LR MR Full" = Res.MAF.full
    ), Export.latex = T,
    Save.path = "Results/Table_SI_res_analysis_MAF.csv")
  }
  
  #### Figure 8: Partial dependence plots ####
  PD.test = T
  if(PD.test == T){
    PP.BRT.kwet <- Plot.partial.dependance(
      FT = BRT.brACA.kwet, Mclim = MC.kwet, Msurf = M.br.GDGT.kwet, Param.clim = "MAAT",
      Color.by.importance = T, Add.interaction.plot = T, Facet.by.methylation = T, Add.repel = T, Add.biplot.PD = T,
      Rel.Width.interac.plot = 70, Rel.Height.interac.plot = 70, Resolution = 70,
      PD.show.predictor = c("IIIb", "IIIc", "IIa", "IIa'", "Ia", "Ib", "Ic"),
      Free.scale = F, Annotate.plots = F, Interaction.order = "normal",
      Selected.biplots = data.frame(Feature1 = c("f.Ib", "f.Ia"), Feature2 = c("f.IIa_5Me", "f.IIa_5Me")),
      H = 1200, W = 800, Save.plot = "Figures/Interaction_plots_BRT_kwet.pdf",
      Save.Rds = "Results/Interaction_plots_BRT_kwet.Rds")
    
    PP.BRT.karid <- Plot.partial.dependance(
      FT = BRT.brACA.karid, Mclim = MC.karid, Msurf = M.br.GDGT.karid, Param.clim = "MAAT",
      Color.by.importance = T, Add.interaction.plot = T, Facet.by.methylation = T, Add.repel = T, Add.biplot.PD = T,
      Rel.Width.interac.plot = 70, Rel.Height.interac.plot = 70, Resolution = 70,
      PD.show.predictor = c("IIIb", "IIIc", "IIa", "IIa'", "Ia", "Ib", "Ic"),
      Free.scale = F, Annotate.plots = F, Interaction.order = "normal",
      Selected.biplots = data.frame(Feature1 = c("f.Ib", "f.Ia"), Feature2 = c("f.IIa_5Me", "f.IIa_5Me")),
      H = 1200, W = 800, Save.plot = "Figures/Interaction_plots_BRT_karid.pdf",
      Save.Rds = "Results/Interaction_plots_BRT_karid.Rds")
    }
  
  #### Figure S6: Partial dependence plots ####
  PD.test = T
  if(PD.test == T){
    PP.BRT.kwet <- Plot.partial.dependance(
      FT = BRT.brACA.kwet, Mclim = MC.kwet, Msurf = M.br.GDGT.kwet, Param.clim = "MAAT",
      Color.by.importance = T, Add.interaction.plot = T, Facet.by.cyclisation = T, Facet.by.methylation = T, Add.repel = T, Add.biplot.PD = T,
      Rel.Width.interac.plot = 70, Rel.Height.interac.plot = 70, Resolution = 70, 
      Free.scale = T, Annotate.plots = F, Interaction.order = "normal", Selected.biplots = data.frame(Feature1 = c("f.Ic", "f.Ia", "f.Ia", "f.Ic"), Feature2 = c("f.IIIa_6Me", "f.IIIb_6Me", "f.IIIa_5Me", "f.IIc_6Me")),
      H = 1200, W = 800, Save.plot = "Figures/Interaction_plots_BRT_kwet_SI.pdf",
      Save.Rds = "Results/Interaction_plots_BRT_kwet_SI.Rds")
    
    PP.BRT.karid <- Plot.partial.dependance(
      FT = BRT.brACA.karid, Mclim = MC.karid, Msurf = M.br.GDGT.karid, Param.clim = "MAAT",
      Color.by.importance = T, Add.interaction.plot = T, Facet.by.cyclisation = T, Facet.by.methylation = T, Add.repel = T, Add.biplot.PD = T,
      Rel.Width.interac.plot = 70, Rel.Height.interac.plot = 70, Resolution = 70,
      Free.scale = T, Annotate.plots = F, Interaction.order = "normal", Selected.biplots = data.frame(Feature1 = c("f.Ic", "f.Ia", "f.Ia", "f.Ic"), Feature2 = c("f.IIIa_6Me", "f.IIIb_6Me", "f.IIIa_5Me", "f.IIc_6Me")),
      H = 1200, W = 800, Save.plot = "Figures/Interaction_plots_BRT_karid_SI.pdf",
      Save.Rds = "Results/Interaction_plots_BRT_karid_SI.Rds")
    }
  
  
}

#### Paleo applications ####
Paleo = T
if(Paleo == T){
  #### Import data ####
  GDGT.Van       <- readRDS("Import/Paleo/Vanevan.Rds")
  GDGT.XRD       <- readRDS("Import/Paleo/XRD.Rds")
  GDGT.NRX       <- readRDS("Import/Paleo/NRX.Rds")
  Actual.val     <- readRDS("Import/Paleo/Core_metadata.Rds")
  BRT.brACA      <- readRDS("Results/BRT_brACA.Rds")
  BRT.brACA.karid<- readRDS("Results/BRT_brACA_karid.Rds")
  BRT.brACA.kwet <- readRDS("Results/BRT_brACA_kwet.Rds")
  M.br.GDGT      <- readRDS("Results/M_brGDGT_ACADB.Rds")
  GDGT.Van.conv  <- GDGT.Van[which(names(GDGT.Van) %in%  names(M.br.GDGT))]
  GDGT.XRD.conv  <- GDGT.XRD[which(names(GDGT.XRD) %in% names(M.br.GDGT))]
  GDGT.NRX.conv  <- GDGT.NRX[which(names(GDGT.NRX) %in% names(M.br.GDGT))]
  
  #### BRT predictions ####
  plot.Vanevan.ft.COST = T
  if(plot.Vanevan.ft.COST == T){
    Vanevan.brACA <- FT.core(Model.BRT = BRT.brACA,
                           MCore = GDGT.Van.conv, MAge = GDGT.Van$Age, GDGT = T,
                           LakeName = "Vanevan", Only.fit = T, Save.RDS = T, Displot = F, 
                           Save.path = "Results/Vanevan.csv")
    
    Vanevan.brACA.karid <- FT.core(Model.BRT = BRT.brACA.karid,
                                 MCore = GDGT.Van.conv, MAge = GDGT.Van$Age, GDGT = T,
                                 LakeName = "Vanevan", Only.fit = T, Save.RDS = T, Displot = F,
                                 Save.path = "Results/Vanevan.csv")
    
    Vanevan.brACA.kwet <- FT.core(Model.BRT = BRT.brACA.kwet,
                                MCore = GDGT.Van.conv, MAge = GDGT.Van$Age, GDGT = T,
                                LakeName = "Vanevan", Only.fit = T, Save.RDS = T, Displot = F,
                                Save.path = "Results/Vanevan.csv")
    
    NRX.brACA <- FT.core(Model.BRT = BRT.brACA,
                         MCore = GDGT.NRX.conv, MAge = GDGT.NRX$Age,
                         LakeName = "NRX", Only.fit = T, Save.RDS = T, Displot = F, GDGT = T,
                         Save.path = "Results/NRX.csv")
    
    NRX.brACA.karid <- FT.core(Model.BRT = BRT.brACA.karid,
                               MCore = GDGT.NRX.conv, MAge = GDGT.NRX$Age,
                               LakeName = "NRX", Only.fit = T, Save.RDS = T, Displot = F, GDGT = T,
                               Save.path = "Results/NRX.csv")
    
    NRX.brACA.kwet <- FT.core(Model.BRT = BRT.brACA.kwet,
                              MCore = GDGT.NRX.conv, MAge = GDGT.NRX$Age,
                              LakeName = "NRX", Only.fit = T, Save.RDS = T, Displot = F, GDGT = T,
                              Save.path = "Results/NRX.csv")
    
    XRD.brACA <- FT.core(Model.BRT = BRT.brACA,
                         MCore = GDGT.XRD.conv, MAge = GDGT.XRD$Age,
                         LakeName = "XRD", Only.fit = T, Save.RDS = T, Displot = F, GDGT = T,
                         Save.path = "Results/XRD.csv")
    
    XRD.brACA.karid <- FT.core(Model.BRT = BRT.brACA.karid,
                               MCore = GDGT.XRD.conv, MAge = GDGT.XRD$Age,
                               LakeName = "XRD", Only.fit = T, Save.RDS = T, Displot = F, GDGT = T,
                               Save.path = "Results/XRD.csv")
    
    XRD.brACA.kwet <- FT.core(Model.BRT = BRT.brACA.kwet,
                              MCore = GDGT.XRD.conv, MAge = GDGT.XRD$Age,
                              LakeName = "XRD", Only.fit = T, Save.RDS = T, Displot = F, GDGT = T,
                              Save.path = "Results/XRD.csv")
    
    
  }
  
  #### Cluster prediction ####
  Cm.predict.Van = T
  if(Cm.predict.Van == T){
    #### Import + settings ####
    Cluster.prediction.ACADB.brGDGT <- readRDS("Results/Cluster.prediction.ACADB.brGDGT.Rds")
    Vanevan.BRT.ACADB <- readRDS("Results/Vanevan_brACA.Rds")[[2]]
    Vanevan.BRT.karid <- readRDS("Results/Vanevan_karid.Rds")[[2]]
    Vanevan.BRT.kwet  <- readRDS("Results/Vanevan_kwet.Rds")[[2]]
    NRX.BRT.ACADB     <- readRDS("Results/NRX_brACA.Rds")[[2]]
    NRX.BRT.karid     <- readRDS("Results/NRX_karid.Rds")[[2]]
    NRX.BRT.kwet      <- readRDS("Results/NRX_kwet.Rds")[[2]]
    XRD.BRT.ACADB     <- readRDS("Results/XRD_brACA.Rds")[[2]]
    XRD.BRT.karid     <- readRDS("Results/XRD_karid.Rds")[[2]]
    XRD.BRT.kwet      <- readRDS("Results/XRD_kwet.Rds")[[2]]
    
    #### MAAT plot ####
    pBRT.Vanevan <- Combine.ML.cluster(
      List.models = list(M1 = Vanevan.BRT.ACADB, M2 = Vanevan.BRT.karid, M3 = Vanevan.BRT.kwet),
      Model.lab = c("ACADB", "K-warm/arid", "K-cold/wet"),
      Cluster.prediction = Cluster.prediction.ACADB.brGDGT, Panel.annot = "B",
      GDGT.paleo = GDGT.Van, Time.lim = c(0, 10000), Time.res = 1000, Time.in.k = T,
      Surf.val = Actual.val$MAAT[row.names(Actual.val) == "Vanevan"],
      Compare.curve = c("MAAT_mr_DJ", "MAAT_soil_Naaf", "MAAT_LSun"), Core.name = "(B) Vanevan (Armenia)",
      Plot.y = "Age", Plot.y.lab = NULL, Param.clim = "MAAT",
      Facet = F, Only.best = F, Show.proba = T, Highlight.combined = T, return.plot = T,
      Save.path = "Results/Vanevan_brACA_combined.Rds"
      )
    
    pBRT.NRX <- Combine.ML.cluster(
      List.models = list(M1 = NRX.BRT.ACADB, M2 = NRX.BRT.karid, M3 = NRX.BRT.kwet),
      Model.lab = c("ACADB", "K-warm/arid", "K-cold/wet"),
      Cluster.prediction = Cluster.prediction.ACADB.brGDGT, Time.res = 1000, Time.in.k = T,
      GDGT.paleo = GDGT.NRX, Time.lim = c(0, 10000),
      Surf.val = Actual.val$MAAT[row.names(Actual.val) == "NRX"],
      Compare.curve = c("MAAT_mr_DJ", "MAAT_DJ_5Me"), Core.name = "(A) NRX (Altai)",
      Plot.y = "Age",  Plot.y.lab = NULL, Param.clim = "MAAT", Panel.annot = "A",
      Facet = F, Only.best = F, Show.proba = T, Highlight.combined = T, return.plot = T,
      Save.path = "Results/NRX_brACA_combined.Rds"
    )
    
    pBRT.XRD <- Combine.ML.cluster(
      List.models = list(M1 = XRD.BRT.ACADB, M2 = XRD.BRT.karid, M3 = XRD.BRT.kwet),
      Model.lab = c("ACADB", "K-warm/arid", "K-cold/wet"),
      Cluster.prediction = Cluster.prediction.ACADB.brGDGT, Panel.annot = "C",
      GDGT.paleo = GDGT.XRD, Time.lim = c(0, 10000),Time.res = 1000, Time.in.k = T,
      Surf.val = Actual.val$MAAT[row.names(Actual.val) == "XRD"],
      Compare.curve = c("MAAT_mr_DJ", "MAAT_DJ_5Me"), Core.name = "(C) XRD (Qaidam)",
      Plot.y = "Age", 
      Plot.y.lab = "Time (10^3 x cal. year BP)", 
      Param.clim = "MAAT",
      Facet = F, Only.best = F, Show.proba = T, Highlight.combined = T, return.plot = T,
      Save.path = "Results/XRD_brACA_combined.Rds"
      )
    
    pCal <- pBRT.NRX[[1]]   / pBRT.NRX[[2]]   / pBRT.NRX[[3]] /
      pBRT.Vanevan[[1]] / pBRT.Vanevan[[2]] / pBRT.Vanevan[[3]] /
      pBRT.XRD[[1]]   / pBRT.XRD[[2]]   / pBRT.XRD[[3]]+
      plot_layout(guides = 'collect', heights = c(1,3,3,1,3,3,1,3,3))&
      theme(legend.position = "bottom")
    H = 1300; W = 600; Save.plot = "Figures/BRT_valid_China.pdf"
    ggsave(filename = Save.plot, pCal, width = W*0.026458333, height = H*0.026458333, units = "cm")
    
    #### AI plot ####
    pBRT.Vanevan.AI <- Combine.ML.cluster(
      List.models = list(M1 = Vanevan.BRT.ACADB, M2 = Vanevan.BRT.karid, M3 = Vanevan.BRT.kwet),
      Model.lab = c("ACADB", "K-warm/arid", "K-cold/wet"),
      Cluster.prediction = Cluster.prediction.ACADB.brGDGT,  Panel.annot = "B",
      GDGT.paleo = GDGT.Van, Time.lim = c(0, 10000), Time.res = 1000, Time.in.k = T,
      Surf.val = Actual.val$AI[row.names(Actual.val) == "Vanevan"],
      Core.name = "(B) Vanevan (Armenia)",
      Plot.y = "Age", Plot.y.lab = NULL, Param.clim = "AI", return.plot = T,
      Facet = F, Only.best = F, Show.proba = T, Highlight.combined = T)
    
    pBRT.NRX.AI <- Combine.ML.cluster(
      List.models = list(M1 = NRX.BRT.ACADB, M2 = NRX.BRT.karid, M3 = NRX.BRT.kwet),
      Model.lab = c("ACADB", "K-warm/arid", "K-cold/wet"),
      Cluster.prediction = Cluster.prediction.ACADB.brGDGT,  Panel.annot = "A",
      GDGT.paleo = GDGT.NRX, Time.lim = c(0, 10000),Time.res = 1000, Time.in.k = T,
      Surf.val = Actual.val$AI[row.names(Actual.val) == "NRX"],
      Core.name = "(A) NRX (Altai)",
      Plot.y = "Age",  Plot.y.lab = NULL, Param.clim = "AI",  return.plot = T,
      Facet = F, Only.best = F, Show.proba = T, Highlight.combined = T)
    
    pBRT.XRD.AI <- Combine.ML.cluster(
      List.models = list(M1 = XRD.BRT.ACADB, M2 = XRD.BRT.karid, M3 = XRD.BRT.kwet),
      Model.lab = c("ACADB", "K-warm/arid", "K-cold/wet"),
      Cluster.prediction = Cluster.prediction.ACADB.brGDGT, Panel.annot = "C",
      GDGT.paleo = GDGT.XRD, Time.lim = c(0, 10000),Time.res = 1000, Time.in.k = T,
      Surf.val = Actual.val$AI[row.names(Actual.val) == "XRD"],
      Core.name = "(C) XRD (Qaidam)", return.plot = T,
      Plot.y = "Age", Plot.y.lab = "Time (10^3 x cal. year BP)", Param.clim = "AI",
      Facet = F, Only.best = F, Show.proba = T, Highlight.combined = T)
    
    pCal.AI <- pBRT.NRX.AI[[1]]   / pBRT.NRX.AI[[2]]   /
      pBRT.Vanevan.AI[[1]] / pBRT.Vanevan.AI[[2]] /
      pBRT.XRD.AI[[1]]   / pBRT.XRD.AI[[2]] +
      plot_layout(guides = 'collect', heights = c(1,3,1,3,1,3))&
      theme(legend.position = "bottom")
    H = 1300; W = 600; Save.plot = "Figures/BRT_valid_China_AI.pdf"
    ggsave(filename = Save.plot, pCal.AI, width = W*0.026458333, height = H*0.026458333, units = "cm")
    
    #### MAF plot ####
    pBRT.Vanevan.MAF <- Combine.ML.cluster(
      List.models = list(M1 = Vanevan.BRT.ACADB, M2 = Vanevan.BRT.karid, M3 = Vanevan.BRT.kwet),
      Model.lab = c("ACADB", "K-warm/arid", "K-cold/wet"),  Panel.annot = "B",
      Cluster.prediction = Cluster.prediction.ACADB.brGDGT,
      GDGT.paleo = GDGT.Van, Time.lim = c(0, 10000), Time.res = 1000, Time.in.k = T,
      Surf.val = Actual.val$MAF[row.names(Actual.val) == "Vanevan"],
      Compare.curve = c("MAF_MSosa", "MAF_meth_Raberg", "MAF_full_Raberg"),
      Core.name = "(B) Vanevan (Armenia)",  return.plot = T,
      Plot.y = "Age", Plot.y.lab = NULL, Param.clim = "MAF",
      Facet = F, Only.best = F, Show.proba = T, Highlight.combined = T)
    
    pBRT.NRX.MAF <- Combine.ML.cluster(
      List.models = list(M1 = NRX.BRT.ACADB, M2 = NRX.BRT.karid, M3 = NRX.BRT.kwet),
      Model.lab = c("ACADB", "K-warm/arid", "K-cold/wet"),
      Cluster.prediction = Cluster.prediction.ACADB.brGDGT,  Panel.annot = "A",
      GDGT.paleo = GDGT.NRX, Time.lim = c(0, 10000),Time.res = 1000, Time.in.k = T,
      Surf.val = Actual.val$MAF[row.names(Actual.val) == "NRX"],
      Compare.curve = c("MAF_MSosa", "MAF_meth_Raberg", "MAF_full_Raberg"), return.plot = T,
      Core.name = "(A) NRX (Altai)", Plot.y = "Age",  Plot.y.lab = NULL, Param.clim = "MAF", 
      Facet = F, Only.best = F, Show.proba = T, Highlight.combined = T)
    
    pBRT.XRD.MAF <- Combine.ML.cluster(
      List.models = list(M1 = XRD.BRT.ACADB, M2 = XRD.BRT.karid, M3 = XRD.BRT.kwet),
      Model.lab = c("ACADB", "K-warm/arid", "K-cold/wet"),
      Cluster.prediction = Cluster.prediction.ACADB.brGDGT, Panel.annot = "C",
      GDGT.paleo = GDGT.XRD, Time.lim = c(0, 10000),Time.res = 1000, Time.in.k = T,
      Surf.val = Actual.val$MAF[row.names(Actual.val) == "XRD"],
      Compare.curve = c("MAF_MSosa", "MAF_meth_Raberg", "MAF_full_Raberg"),
      Core.name = "(C) XRD (Qaidam)", return.plot = T,
      Plot.y = "Age", Plot.y.lab = "Time (10^3 x cal. year BP)", Param.clim = "MAF",
      Facet = F, Only.best = F, Show.proba = T, Highlight.combined = T)
    
    pCal.MAF <- pBRT.NRX.MAF[[1]]   / pBRT.NRX.MAF[[2]]   / pBRT.NRX.MAF[[3]] /
      pBRT.Vanevan.MAF[[1]] / pBRT.Vanevan.MAF[[2]] / pBRT.Vanevan.MAF[[3]] /
      pBRT.XRD.MAF[[1]]   / pBRT.XRD.MAF[[2]]   / pBRT.XRD.MAF[[3]]+
      plot_layout(guides = 'collect', heights = c(1,3,3,1,3,3,1,3,3))&
      theme(legend.position = "bottom")
    H = 1300; W = 600; Save.plot = "Figures/BRT_valid_China_MAF.pdf"
    ggsave(filename = Save.plot, pCal.MAF, width = W*0.026458333, height = H*0.026458333, units = "cm")    
  }
  
  #### Test (randomTF) #### 
  test.randomTF = F
  if(test.randomTF == T){
    Vanevan.rTF.ACADB <- Plot.randomTF(MPsurf = M.br.GDGT, MPpaleo = GDGT.Van.conv,  Mclim = MC, Database = "ACADB", Lake = "Vanevan", 
                                     Save.path = "Results/Vanevan_randomFT_ACADB.Rds", 
                                     H = 500, W = 2000, Save.plot = "Figures/Vanevan_randomTF_ACADB.pdf")
    
    Vanevan.rTF.ACADB.comb <- Plot.randomTF(MPsurf = M.br.GDGT.kwet, MPpaleo = GDGT.Van.conv,  Mclim = MC.kwet, Database = "ACADB-combined", Lake = "Vanevan",
                                          Save.path = "Results/Vanevan_randomFT_ACADB_comb.Rds", 
                                          H = 500, W = 2000, Save.plot = "Figures/Vanevan_randomTF_ACADB_comb.pdf")
  
    XRD.rTF.ACADB <- Plot.randomTF(MPsurf = M.br.GDGT, MPpaleo = GDGT.XRD.conv,  Mclim = MC, Database = "ACADB", Lake = "XRD", 
                                   Save.path = "Results/XRD_randomFT_ACADB.Rds", 
                                   H = 500, W = 2000, Save.plot = "Figures/XRD_randomTF_ACADB.pdf")
    
    XRD.rTF.ACADB.comb <- Plot.randomTF(MPsurf = M.br.GDGT.karid, MPpaleo = GDGT.XRD.conv,  Mclim = MC.karid, Database = "ACADB-combined", Lake = "XRD",
                                        Save.path = "Results/XRD_randomFT_ACADB_comb.Rds",
                                        H = 500, W = 2000, Save.plot = "Figures/XRD_randomTF_ACADB_comb.pdf")
  
    NRX.rTF.ACADB <- Plot.randomTF(MPsurf = M.br.GDGT, MPpaleo = GDGT.NRX.conv,  Mclim = MC, Database = "ACADB", Lake = "NRX",
                                   Save.path = "Results/NRX_randomFT_ACADB.Rds",
                                   H = 500, W = 2000, Save.plot = "Figures/NRX_randomTF_ACADB.pdf")
    
    NRX.rTF.ACADB.comb <- Plot.randomTF(MPsurf = M.br.GDGT.kwet, MPpaleo = GDGT.NRX.conv,  Mclim = MC.kwet, Database = "ACADB-combined",
                                        Save.path = "Resultats/NRX_randomFT_ACADB_comb.Rds",
                                        H = 500, W = 2000, Save.plot = "Figures/NRX_randomTF_ACADB_comb.pdf")}
  
  #### Table randomTF() ####
  Full.table = F
  if(Full.table == T){
    XRD.rTF.ACADB          <- readRDS("Results/XRD_randomFT_ACADB.Rds")
    XRD.rTF.ACADB.comb     <- readRDS("Results/XRD_randomFT_ACADB_comb.Rds")
    NRX.rTF.ACADB          <- readRDS("Results/NRX_randomFT_ACADB.Rds")
    NRX.rTF.ACADB.comb     <- readRDS("Results/NRX_randomFT_ACADB_comb.Rds")
    Vanevan.rTF.ACADB      <- readRDS("Results/Vanevan_randomFT_ACADB.Rds")
    Vanevan.rTF.ACADB.comb <- readRDS("Results/Vanevan_randomFT_ACADB_comb.Rds")
    
    XRD.rTF.ACADB$lake <- "XRD" 
    XRD.rTF.ACADB.comb$lake <- "XRD" 
    NRX.rTF.ACADB$lake <- "NRX" 
    NRX.rTF.ACADB.comb$lake <- "NRX" 
    Vanevan.rTF.ACADB$lake <- "Vanevan" 
    Vanevan.rTF.ACADB.comb$lake <- "Vanevan" 
    
    Table.rTF.full <- rbind(XRD.rTF.ACADB,
                            XRD.rTF.ACADB.comb,
                            NRX.rTF.ACADB,
                            NRX.rTF.ACADB.comb,
                            Vanevan.rTF.ACADB,
                            Vanevan.rTF.ACADB.comb) 
    
    Table.rTF.full <- Table.rTF.full[c(ncol(Table.rTF.full),1:(ncol(Table.rTF.full)-1))]
    Table.rTF.full <- Table.rTF.full[Table.rTF.full$Model == "BRT",]
    Table.rTF.full <- Table.rTF.full[order(Table.rTF.full$lake, Table.rTF.full$Database),]
    
    Position.clim <- match(unique(Table.rTF.full$lake), Table.rTF.full$lake)
    Table.rTF.full$lake[setdiff(seq(1:nrow(Table.rTF.full)),Position.clim)] <- ""
    names(Table.rTF.full)[ncol(Table.rTF.full)] <- "$\\mathrm{PCA_{1} (var. \\%)^{(b)}}$"
    names(Table.rTF.full)[ncol(Table.rTF.full)-1] <- "Threshold$^{(a)}$"
    names(Table.rTF.full)[1] <- "Archive name"
    
    Save.path.tex <- "Results/Results_randomTF.tex"
    LateX.caption <- "Statistical results for the significance test conducted with \texttt{randomTF()}, designed to assess the reliability of the BRT climate reconstruction based on various calibration sets (ACADB and the dominant cluster for the combined models), were compared to a transfer function trained on randomly selected calibration sets, using 999 permutations. The three archives (NRX, XRD and Vanevan) are tested."
    Tlatex <- xtable(Table.rTF.full, caption = LateX.caption, type = "latex", label = "Table_randomTF")
    print(Tlatex, file = Save.path.tex, booktabs = T, include.rownames = F, comment = F,
          caption.placement = "top", sanitize.text.function = function(x){x},
          hline.after = c(-1,0,Position.clim[-c(1)]-1,nrow(Table.rTF.full)))
  }
}

