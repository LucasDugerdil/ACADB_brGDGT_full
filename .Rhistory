GDGT.XRD <- data.frame(read.csv(file="paleo/XRD.csv", sep=",",dec=".",header=T,row.names=1))        # GDGT indexe Ayrag
GDGT.XRD
GDGT.XRD <- data.frame(read.csv(file="Import/Paleo/XRD.csv", sep=",",dec=".",header=T,row.names=1))        # GDGT indexe Ayrag
source("Import/Script/BRT_script.R")
GDGT.XRD <- data.frame(read.csv(file="Import/Paleo/XRD.csv", sep=",",dec=".",header=T,row.names=1))        # GDGT indexe Ayrag
GDGT.histo.plot.surf.core(Mcore = GDGT.XRD,
Iso.GDGT = F, Remove.8Me = T, Remove.7Me = T, W = 1600, H = 700,
Save.path = "Figures/Hist_brGDGT_XRD.pdf"
)
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_calibrations/main.R")
#### Import training data and script ####
BRT.brACA   <- readRDS("Import/Training/BRT_brACA.Rds")
BRT.brACA.karid   <- readRDS("Import/Training/BRT_brACA_karid.Rds")
BRT.brACA.kwet   <- readRDS("Import/Training/BRT_brACAkwet.Rds")
M.br.GDGT <- readRDS("Import/Training/M_brGDGT_ACADB.Rds")
source("Import/Script/BRT_script.R")
GDGT.XRD <- data.frame(read.csv(file="Import/Paleo/XRD.csv", sep=",",dec=".",header=T,row.names=1))        # GDGT indexe Ayrag
GDGT.XRD.conv <- GDGT.XRD[which(names(GDGT.XRD) %in% names(M.br.GDGT))]
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_calibrations/main.R")
#### Combined model ####
XRD.brACA <- readRDS("ResultsXRD_BRT_brACA.Rds")[[2]]
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_calibrations/main.R")
#### Import training data and script ####
BRT.brACA   <- readRDS("Import/Training/BRT_brACA.Rds")
BRT.brACA.karid   <- readRDS("Import/Training/BRT_brACA_karid.Rds")
BRT.brACA.kwet   <- readRDS("Import/Training/BRT_brACAkwet.Rds")
M.br.GDGT <- readRDS("Import/Training/M_brGDGT_ACADB.Rds")
Cluster.prediction.ACADB.brGDGT <- readRDS("Import/Training/Cluster.prediction.ACADB.brGDGT.Rds")
source("Import/Script/BRT_script.R")
GDGT.XRD <- data.frame(read.csv(file="Import/Paleo/XRD.csv", sep=",",dec=".",header=T,row.names=1))        # GDGT indexe Ayrag
#### Verify if the Fractional abundances of the cores are OK ####
GDGT.histo.plot.surf.core(Mcore = GDGT.XRD,
Iso.GDGT = F, Remove.8Me = T, Remove.7Me = T, W = 1600, H = 700,
Save.path = "Figures/Hist_brGDGT_XRD.pdf"
)
GDGT.XRD.conv <- GDGT.XRD[which(names(GDGT.XRD) %in% names(M.br.GDGT))]
XRD.brACA <- FT.core(Model.BRT = BRT.brACA,
MCore = GDGT.XRD.conv, MAge = GDGT.XRD$Age,
LakeName = "XRD", Only.fit = T, Save.RDS = T, Displot = F, GDGT = T,
Save.path = "Results/XRD.csv")
XRD.brACA <- FT.core(Model.BRT = BRT.brACA,
MCore = GDGT.XRD.conv, MAge = GDGT.XRD$Age,
LakeName = "XRD", Only.fit = T, Save.RDS = T, Displot = F, GDGT = T,
Save.path = "Results/XRD_BRT.csv")
GDGT.XRD.conv <- GDGT.XRD[which(names(GDGT.XRD) %in% names(M.br.GDGT))]
XRD.brACA <- FT.core(Model.BRT = BRT.brACA,
MCore = GDGT.XRD.conv, MAge = GDGT.XRD$Age,
LakeName = "XRD", Only.fit = T, Save.RDS = T, Displot = F, GDGT = T,
Save.path = "Results/XRD_BRT.csv")
XRD.brACA.karid <- FT.core(Model.BRT = BRT.brACA.karid,
MCore = GDGT.XRD.conv, MAge = GDGT.XRD$Age,
LakeName = "XRD", Only.fit = T, Save.RDS = T, Displot = F, GDGT = T,
Save.path = "Results/XRD_BRT.csv")
XRD.brACA.kwet <- FT.core(Model.BRT = BRT.brACA.kwet,
MCore = GDGT.XRD.conv, MAge = GDGT.XRD$Age,
LakeName = "XRD", Only.fit = T, Save.RDS = T, Displot = F, GDGT = T,
Save.path = "Results/XRD_BRT.csv")
#### Combined model ####
XRD.brACA <- readRDS("Results/XRD_BRT_brACA.Rds")[[2]]
XRD.brACA.karid <- readRDS("Results/XRD_BRT_karid.Rds")[[2]]
XRD.brACA.kwet <- readRDS("Results/XRD_BRT_kwet.Rds")[[2]]
pBRT.XRD <- Combine.ML.cluster(
List.models = list(M1 = XRD.brACA, M2 = XRD.brACA.karid, M3 = XRD.brACA.kwet),
Model.lab = c("ACADB", "K-warm/arid", "K-cold/wet"),
Cluster.prediction = Cluster.prediction.ACADB.brGDGT,
GDGT.paleo = GDGT.XRD, Time.lim = c(0, 7200),
Surf.val = Cores.metadata$MAAT[row.names(Cores.metadata) == "XRD"],
Compare.curve = c("MAAT_mr_DJ", "MAAT_DJ_5Me", "MAAT_NMSDB_mr5"), Core.name = "(C) XRD (Qaidam)",
Plot.y = "Age", Plot.y.lab = "Age (yr cal BP)", Param.clim = "MAAT", Cluster.prob = "K-cold/wet",
Facet = F, Only.best = F, Show.proba = T, Highlight.combined = T,
Save.path = "Resultats/China/GDGT/Cores/XRD/Func_trans/XRD_brACA_combined.Rds"
)
XRD.metadata  <- data.frame(read.csv(file="Import/Paleo/XRD_metadata.csv", sep=",",dec=".",header=T,row.names=1))        # GDGT indexe Ayrag
XRD.metadata
Actual.val <- Cores.metadata[c(4,5,16,13,31,32),]
Actual.val <- XRD.metadata[c(4,5,16,13,31,32),]
Actual.val
XRD.metadata  <- data.frame(read.csv(file="Import/Paleo/XRD_metadata.csv", sep=",",dec=".",header=T,row.names=1))        # GDGT indexe Ayrag
XRD.metadata
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_calibrations/main.R")
XRD.brACA
XRD.brACA.karid
XRD.brACA.kwet
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_calibrations/main.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_calibrations/main.R", echo=TRUE)
XRD.brACA
Cluster.prediction.ACADB.brGDGT
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_calibrations/Import/Script/BRT_script.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_calibrations/main.R")
Cluster.prediction.ACADB.brGDGT
GDGT.XRD
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_calibrations/main.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_calibrations/Import/Script/BRT_script.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_calibrations/main.R")
XRD.brACA
XRD.brACA <- FT.core(Model.BRT = BRT.brACA, MCore = GDGT.XRD.conv, MAge = GDGT.XRD$Age, Save.path = "Results/XRD_BRT.csv")
XRD.brACA
XRD.rTF.ACADB <- Plot.randomTF(MPsurf = M.br.GDGT, MPpaleo = GDGT.XRD.conv,  Mclim = MC, Database = "ACADB", Lake = "XRD", Plot.MAT = F, Plot.WAPLS = F,
Save.path = "Results/XRD_randomFT_ACADB.Rds", return.plot = T, Plot.RF = T, Plot.BRT = T,
H = 500, W = 2000, Save.plot = "Figures/XRD_randomTF_ACADB.pdf")
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_calibrations/main.R")
XRD.rTF.ACADB <- Plot.randomTF(MPsurf = M.br.GDGT, MPpaleo = GDGT.XRD.conv,  Mclim = MC, Database = "ACADB", Lake = "XRD",
Save.path = "Results/XRD_randomFT_ACADB.Rds",
H = 500, W = 2000, Save.plot = "Figures/XRD_randomTF_ACADB.pdf")
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_calibrations/Import/Script/BRT_script.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_calibrations/main.R")
XRD.rTF.ACADB <- Plot.randomTF(MPsurf = M.br.GDGT, MPpaleo = GDGT.XRD.conv,  Mclim = MC, Database = "ACADB", Lake = "XRD",
Save.path = "Results/XRD_randomFT_ACADB.Rds",
H = 500, W = 2000, Save.plot = "Figures/XRD_randomTF_ACADB.pdf")
MC <- saveRDS("Import/Training/M_clim_ACADB.Rds")
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_calibrations/main.R")
XRD.rTF.ACADB <- Plot.randomTF(MPsurf = M.br.GDGT, MPpaleo = GDGT.XRD.conv,  Mclim = MC, #Database = "ACADB", Lake = "XRD",
Save.path = "Results/XRD_randomFT_ACADB.Rds",
H = 500, W = 2000, Save.plot = "Figures/XRD_randomTF_ACADB.pdf")
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_calibrations/main.R")
XRD.rTF.ACADB <- Plot.randomTF(MPsurf = M.br.GDGT, MPpaleo = GDGT.XRD.conv,  Mclim = MC, #Database = "ACADB", Lake = "XRD",
Save.path = "Results/XRD_randomFT_ACADB.Rds",
H = 500, W = 2000, Save.plot = "Figures/XRD_randomTF_ACADB.pdf")
GDGT.XRD
#### Import paleo data ####
GDGT.XRD <- data.frame(read.csv(file="Import/Paleo/XRD.csv", sep=",",dec=".",header=T,row.names=1))        # GDGT indexe Ayrag
GDGT.XRD
rm(list = ls()
)
#### Import training data and script ####
Meco <- readRDS("Import/Training/Meco.Rds")
M.br.GDGT <- readRDS("Import/Training/MbrGDGT.Rds")
Meco
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
#### Subsets des FA ####
To.remove <- grep("[7,8]", colnames(M.br.GDGT))
To.keep <- seq(1, ncol(M.br.GDGT))
To.keep <- setdiff(To.keep, To.remove)
M.br.GDGT.km <- M.br.GDGT[,To.keep]
M.br.GDGT.km <- data.frame(t(M.br.GDGT.km), check.names = F)
M.br.GDGT.km <- apply(M.br.GDGT.km, 2, MESS::round_percent)
M.br.GDGT.km <- data.frame(t(M.br.GDGT.km/100), check.names = F)
Keep.samptype <- c("Soil", "Moss", "Lacustrine")
M.br.GDGT.km <- M.br.GDGT.km[row.names(M.br.GDGT.km) %in% row.names(Meco[Meco$Sample.type %in% Keep.samptype,]),]
Mclim.km <- Mclim[row.names(Mclim) %in% row.names(Meco[Meco$Sample.type %in% Keep.samptype,]),]
Mclim <- readRDS("Import/Training/Mclim.Rds")
#### Subsets des FA ####
To.remove <- grep("[7,8]", colnames(M.br.GDGT))
To.keep <- seq(1, ncol(M.br.GDGT))
To.keep <- setdiff(To.keep, To.remove)
M.br.GDGT.km <- M.br.GDGT[,To.keep]
M.br.GDGT.km <- data.frame(t(M.br.GDGT.km), check.names = F)
M.br.GDGT.km <- apply(M.br.GDGT.km, 2, MESS::round_percent)
M.br.GDGT.km <- data.frame(t(M.br.GDGT.km/100), check.names = F)
Keep.samptype <- c("Soil", "Moss", "Lacustrine")
M.br.GDGT.km <- M.br.GDGT.km[row.names(M.br.GDGT.km) %in% row.names(Meco[Meco$Sample.type %in% Keep.samptype,]),]
Mclim.km <- Mclim[row.names(Mclim) %in% row.names(Meco[Meco$Sample.type %in% Keep.samptype,]),]
Meco.km <- Meco[row.names(Meco) %in% row.names(Meco[Meco$Sample.type %in% Keep.samptype,]),]
#### Silhouet test (PAM) ####
PAM.test = F
silhouette_score <- function(k){
km <- kmeans(M.br.GDGT.km, centers = k, nstart=25)
ss <- silhouette(km$cluster, dist(M.br.GDGT.km))
mean(ss[, 3])
}
k <- 2:10
avg_sil <- sapply(k, silhouette_score)
silhouette_score <- function(k){
km <- kmeans(M.br.GDGT.km, centers = k, nstart=25)
ss <- cluster::silhouette(km$cluster, dist(M.br.GDGT.km))
mean(ss[, 3])
}
k <- 2:10
avg_sil <- sapply(k, silhouette_score)
plot(k, type='b', avg_sil, xlab='Number of clusters', ylab='Average Silhouette Scores', frame=FALSE)
pHAC <- fviz_nbclust(M.br.GDGT.km, kmeans, method='silhouette')
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
silhouette_score <- function(k){
km <- kmeans(M.br.GDGT.km, centers = k, nstart=25)
ss <- silhouette(km$cluster, dist(M.br.GDGT.km))
mean(ss[, 3])
}
k <- 2:10
avg_sil <- sapply(k, silhouette_score)
plot(k, type='b', avg_sil, xlab='Number of clusters', ylab='Average Silhouette Scores', frame=FALSE)
pHAC <- fviz_nbclust(M.br.GDGT.km, kmeans, method='silhouette')
W = 1000; H = 500; Save.path = "Figures/Silhouette_cluster.pdf"
ggsave(filename = Save.path, plot = pHAC, width = W*0.026458333, height = H*0.026458333, units = "cm")
#### Clustering (Fuzzy C-means) ####
cm <- cmeans(M.br.GDGT.km, 2)
library(e1071)
#### Clustering (Fuzzy C-means) ####
cm <- cmeans(M.br.GDGT.km, 2)
H <- get_clust_tendency(M.br.GDGT.km, n = 50)
hopkins <- round(H$hopkins_stat, digits = 2)
cm$cluster[cm$cluster == 1] <- "K-warm/arid"
cm$cluster[cm$cluster == 2] <- "K-cold/wet"
M.br.GDGT.km$Cluster.km <- cm$cluster
#### K-means evaluation and stats ####
Training.set <- M.br.GDGT.km
smote_result <- SMOTE(Training.set[-ncol(Training.set)], Training.set[ncol(Training.set)], K = 5, dup_size = 1)
library(smotefamily)
smote_result <- SMOTE(Training.set[-ncol(Training.set)], Training.set[ncol(Training.set)], K = 5, dup_size = 1)
C1 <- smote_result$data[smote_result$data$class == "K-warm/arid",]
C2 <- smote_result$data[smote_result$data$class == "K-cold/wet",]
set.seed(42)
C2 <- C2[sample(nrow(C2), nrow(C1)),]
Training.set <- rbind(C1, C2)
names(Training.set)[names(Training.set) == "class"] <- "Cluster.km"
Training.set$Cluster.km <-  factor(Training.set$Cluster.km)
Cluster.prediction.ACADB.brGDGT <- randomForest(Cluster.km ~ ., data = Training.set, ntree = 500)
saveRDS(Cluster.prediction.ACADB.brGDGT, "Results/Cluster.prediction.ACADB.brGDGT.Rds")
Meco <- full_join(rownames_to_column(Meco), rownames_to_column(M.br.GDGT.km["Cluster.km"]), by = rowname)
library(tibble)
Meco <- full_join(rownames_to_column(Meco), rownames_to_column(M.br.GDGT.km["Cluster.km"]), by = rowname)
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
#### K-means evaluation and stats ####
Training.set <- M.br.GDGT.km
Training.set
smote_result <- SMOTE(Training.set[-ncol(Training.set)], Training.set[ncol(Training.set)], K = 5, dup_size = 1)
C1 <- smote_result$data[smote_result$data$class == "K-warm/arid",]
C2 <- smote_result$data[smote_result$data$class == "K-cold/wet",]
set.seed(42)
C2 <- C2[sample(nrow(C2), nrow(C1)),]
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
rownames_to_column(M.br.GDGT.km["Cluster.km"])
rownames_to_column(Meco)
Meco <- full_join(rownames_to_column(Meco), rownames_to_column(M.br.GDGT.km["Cluster.km"]), by = rowname)
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
nrow(C2) > nrow(C1)
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/Import/Script/BRT_script.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
Msurf.mean
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
#### Import WDB data ####
Msurf.mean.WDB <- readRDS("Import/Training/GDGT_WDB.Rds")
Meco.WDB <- readRDS("Import/Training/GDGT_WDB_eco.Rds")
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
#### Ternary plot ####
PIR3 <- Diag.ternaire.methylation(MGDGT = Msurf.mean,
Mcol = Meco$Cluster.km, Return.plot = T, Full.labels = F, Add.facet = F,
Annot = "B1", Show.Dearing = F, Show.Naafs.peat = F, Show.Plotly = F, Show.lake = F, Show.arrows = F,
W = 1000, H = 1000, Alpha.dot = 0.8, Size.dot = 2.5, Export.to.chart.studio = F, Remove.ACA = T,
Save.path = "Figures/DiagTern_methylation_kclust.pdf")
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
#### Import and clean data ####
# source("Scripts/Pollen_fun_trans.R")
M.MAAT.GDGT <- Msurf.mean[,grep("^MAAT", colnames(Msurf.mean))]
M.br.GDGT <- Msurf.mean[,grep("^f.I", colnames(Msurf.mean))]
#### Import and clean data ####
# source("Scripts/Pollen_fun_trans.R")
M.MAAT.GDGT <- Msurf.mean[,grep("^MAAT", colnames(Msurf.mean))]
M.br.GDGT <- Msurf.mean[,grep("^f.I", colnames(Msurf.mean))]
To.remove <- grep("[7,8]", colnames(M.br.GDGT))
To.keep <- seq(1, ncol(M.br.GDGT))
To.keep <- setdiff(To.keep, To.remove)
M.br.GDGT <- M.br.GDGT[,To.keep]
M.br.GDGT <- M.br.GDGT[,grep("^f.I", colnames(M.br.GDGT))]
M.br.GDGT <- M.br.GDGT[row.names(M.br.GDGT) %in% row.names(Meco[Meco$Sample.type %in% c("Soil", "Moss"),]),]
M.MAAT.GDGT <- M.MAAT.GDGT[row.names(M.MAAT.GDGT) %in% row.names(Meco[Meco$Sample.type %in% c("Soil", "Moss"),]),]
Mclim <- Mclim[row.names(Mclim) %in% row.names(Meco[Meco$Sample.type %in% c("Soil", "Moss"),]),]
Meco <- Meco[row.names(Meco) %in% row.names(Meco[Meco$Sample.type %in% c("Soil", "Moss"),]),]
Mcoord <- subset(Meco, select = c(Latitude, Longitude))
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
library(dismo) # BRT
BRT.brACA.bool = T
if(BRT.brACA.bool == T){
BRT.brACA <- FT.quantif(M.br.GDGT, MC, Mcoord = Mcoord, Model = "BRT", Save.RDS = T,
Save.path = "Results/BRT_brACA.csv")
BRT.brACA.karid <- FT.quantif(M.br.GDGT.karid, MC.karid, Mcoord = Mcoord.karid, Model = "BRT", Save.RDS = T,
Save.path = "Results/BRT_brACA_karid.csv")
BRT.brACA.kwet <- FT.quantif(M.br.GDGT.kwet, MC.kwet, Mcoord = Mcoord.kwet, Model = "BRT", Save.RDS = T,
Save.path = "Results/BRT_brACAkwet.csv")}
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
Keep.clim <- c("AI", "MAAT", "MAP", "MTWAQ", 'MTCOQ', "MPWAQ", "MPCOQ")
Keep.physico <- c("pH", "Salinity")
Mmatcor <- cbind(Meco[Keep.physico], Mclim[Keep.clim])
B <- Mat.corel(Mmatcor, Mmatcor,
I.confiance = 0.95, Label.simple = T,
Display.pval = "blank", Disp.R = "number",
Title = "Correlation between br-GDGT and climate parameters.",
Save.path = "Resultats/ACA/GDGT/Surface/Matcor_best_clim.csv",
Save.plot = "Figures/ACA/GDGT/Surface/Matcor/Matcor_best_clim.pdf",
H = 500, W = 2200)
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
#### Import data ####
GDGT.Kan <- readRDS("Project_GitHub/ACADB_brGDGT_full/Import/Paleo/Vanevan.Rds")
#### Import data ####
GDGT.Kan <- readRDS("Import/Paleo/Vanevan.Rds")
GDGT.Kan
GDGT.XRD <- readRDS("Import/Paleo/XRD.Rds")
GDGT.NRX <- readRDS("Import/Paleo/NRX.Rds")
GDGT.histo.plot.surf.core(Mcore = GDGT.Kan, Iso.GDGT = T, Remove.8Me = F, Remove.7Me = F, W = 1600, H = 700, Save.path = "Figures/Kan_Hist_br-GDGT.pdf")
GDGT.histo.plot.surf.core(Mcore = GDGT.XRD, Iso.GDGT = T, Remove.8Me = F, Remove.7Me = F, W = 1600, H = 700, Save.path = "Figures/NRX_Hist_br-GDGT.pdf")
GDGT.histo.plot.surf.core(Mcore = GDGT.NRX, Iso.GDGT = T, Remove.8Me = F, Remove.7Me = F, W = 1600, H = 700, Save.path = "Figures/XRD_Hist_br-GDGT.pdf")
Actual.val  <- readRDS("Import/Paleo/Core_metadata.Rds")
Actual.val
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
#### Import + settings ####
Cluster.prediction.ACADB.brGDGT <- readRDS("Results/Cluster.prediction.ACADB.brGDGT.Rds")
#### Import + settings ####
Cluster.prediction.ACADB.brGDGT <- readRDS("Results/Cluster.prediction.ACADB.brGDGT.Rds")
Kanli.brACA       <- readRDS("Results/Kanli_BRT_brACA.Rds")[[2]]
NRX.brACA         <- readRDS("Results/NRX_brACA.Rds")[[2]]
NRX.brACA.karid   <- readRDS("Results/NRX_karid.Rds")[[2]]
NRX.brACA.kwet    <- readRDS("Results/NRX_kwet.Rds")[[2]]
XRD.brACA         <- readRDS("Results/XRD_brACA.Rds")[[2]]
XRD.brACA.karid   <- readRDS("Results/XRD_karid.Rds")[[2]]
XRD.brACA.kwet    <- readRDS("Results/XRD_kwet.Rds")[[2]]
Kanli.brACA       <- readRDS("Results/Kanli_brACA.Rds")[[2]]
Kanli.brACA.karid <- readRDS("Results/Kanli_karid.Rds")[[2]]
Kanli.brACA.kwet  <- readRDS("Results/Kanli_kwet.Rds")[[2]]
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
Kanli.brACA <- FT.core(Model.BRT = BRT.brACA,
MCore = GDGT.Kan.conv, MAge = GDGT.Kan$Age, GDGT = T,
LakeName = "Kanli", Only.fit = T, Save.RDS = T, Displot = F,
Save.path = "Results/Kanli.csv")
Kanli.brACA.karid <- FT.core(Model.BRT = BRT.brACA.karid,
MCore = GDGT.Kan.conv, MAge = GDGT.Kan$Age, GDGT = T,
LakeName = "Kanli", Only.fit = T, Save.RDS = T, Displot = F,
Save.path = "Results/Kanli.csv")
Kanli.brACA.kwet <- FT.core(Model.BRT = BRT.brACA.kwet,
MCore = GDGT.Kan.conv, MAge = GDGT.Kan$Age, GDGT = T,
LakeName = "Kanli", Only.fit = T, Save.RDS = T, Displot = F,
Save.path = "Results/Kanli.csv")
#### Import + settings ####
Cluster.prediction.ACADB.brGDGT <- readRDS("Results/Cluster.prediction.ACADB.brGDGT.Rds")
Kanli.brACA       <- readRDS("Results/Kanli_brACA.Rds")[[2]]
Kanli.brACA.karid <- readRDS("Results/Kanli_karid.Rds")[[2]]
Kanli.brACA.kwet  <- readRDS("Results/Kanli_kwet.Rds")[[2]]
NRX.brACA         <- readRDS("Results/NRX_brACA.Rds")[[2]]
NRX.brACA.karid   <- readRDS("Results/NRX_karid.Rds")[[2]]
NRX.brACA.kwet    <- readRDS("Results/NRX_kwet.Rds")[[2]]
XRD.brACA         <- readRDS("Results/XRD_brACA.Rds")[[2]]
XRD.brACA.karid   <- readRDS("Results/XRD_karid.Rds")[[2]]
XRD.brACA.kwet    <- readRDS("Results/XRD_kwet.Rds")[[2]]
#### MAAT plot ####
pBRT.Kanli <- Combine.ML.cluster(
List.models = list(M1 = Kanli.brACA, M2 = Kanli.brACA.karid, M3 = Kanli.brACA.kwet),
Model.lab = c("ACADB", "K-warm/arid", "K-cold/wet"),
Cluster.prediction = Cluster.prediction.ACADB.brGDGT,
GDGT.paleo = GDGT.Kan,
Surf.val = Actual.val$MAAT[row.names(Actual.val) == "Vanevan"],
Compare.curve = c("MAAT_mr_DJ", "MAAT_soil_Naaf", "MAAT_LSun"), Core.name = "(B) Vanevan (Armenia)",
Plot.y = "Age", Plot.y.lab = NULL, Param.clim = "MAAT", Cluster.prob = "K-warm/arid",
Facet = F, Only.best = F, Show.proba = T, Highlight.combined = T,
Save.path = "Results/Kanli_brACA_combined.Rds",
H = 1100, W = 450, Save.plot ="Figures/Test_BRT_Kan.pdf")
#### MAAT plot ####
pBRT.Kanli <- Combine.ML.cluster(
List.models = list(M1 = Kanli.brACA, M2 = Kanli.brACA.karid, M3 = Kanli.brACA.kwet),
Model.lab = c("ACADB", "K-warm/arid", "K-cold/wet"),
Cluster.prediction = Cluster.prediction.ACADB.brGDGT,
GDGT.paleo = GDGT.Kan,
Surf.val = Actual.val$MAAT[row.names(Actual.val) == "Vanevan"],
Compare.curve = c("MAAT_mr_DJ", "MAAT_soil_Naaf", "MAAT_LSun"), Core.name = "(B) Vanevan (Armenia)",
Plot.y = "Age", Plot.y.lab = NULL, Param.clim = "MAAT", Cluster.prob = "K-warm/arid",
Facet = F, Only.best = F, Show.proba = T, Highlight.combined = T,
Save.path = "Results/Kanli_brACA_combined.Rds")
pBRT.NRX <- Combine.ML.cluster(
List.models = list(M1 = NRX.brACA, M2 = NRX.brACA.karid, M3 = NRX.brACA.kwet),
Model.lab = c("ACADB", "K-warm/arid", "K-cold/wet"),
Cluster.prediction = Cluster.prediction.ACADB.brGDGT,
GDGT.paleo = GDGT.NRX, Time.lim = c(0, 7200), Cluster.prob = "K-warm/arid",
Surf.val = Cores.metadata$MAAT[row.names(Cores.metadata) == "NRX"],
Compare.curve = c("MAAT_mr_DJ", "MAAT_DJ_5Me", "MAAT_NMSDB_mr5"), Core.name = "(A) NRX (Altai)",
Plot.y = "Age",  Plot.y.lab = NULL, Param.clim = "MAAT",
Facet = F, Only.best = F, Show.proba = T, Highlight.combined = T,
Save.path = "Resultats/China/GDGT/Cores/NRX/Func_trans/NRX_brACA_combined.Rds"
)
pBRT.NRX <- Combine.ML.cluster(
List.models = list(M1 = NRX.brACA, M2 = NRX.brACA.karid, M3 = NRX.brACA.kwet),
Model.lab = c("ACADB", "K-warm/arid", "K-cold/wet"),
Cluster.prediction = Cluster.prediction.ACADB.brGDGT,
GDGT.paleo = GDGT.NRX, Time.lim = c(0, 7200), Cluster.prob = "K-warm/arid",
Surf.val = Cores.metadata$MAAT[row.names(Cores.metadata) == "NRX"],
Compare.curve = c("MAAT_mr_DJ", "MAAT_DJ_5Me", "MAAT_NMSDB_mr5"), Core.name = "(A) NRX (Altai)",
Plot.y = "Age",  Plot.y.lab = NULL, Param.clim = "MAAT",
Facet = F, Only.best = F, Show.proba = T, Highlight.combined = T,
Save.path = "Results/NRX_brACA_combined.Rds"
)
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/Import/Script/BRT_script.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
rm(list = ls())
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/Import/Script/BRT_script.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/Import/Script/BRT_script.R")
source("~/Documents/Recherche/R_stats/Project_GitHub/ACADB_brGDGT_full/main.R")
